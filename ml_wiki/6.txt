Association rule learning is a rule-based machine learning method for discovering interesting relations between variables in large databases. It is intended to identify strong rules discovered in databases using some measures of interestingness.Based on the concept of strong rules, Rakesh Agrawal, Tomasz Imieli\u0144ski and Arun Swami introduced association rules for discovering regularities between products in large-scale transaction data recorded by point-of-sale (POS) systems in supermarkets. For example, the rule \n  \n    \n      \n        {\n        \n          o\n          n\n          i\n          o\n          n\n          s\n          ,\n          p\n          o\n          t\n          a\n          t\n          o\n          e\n          s\n        \n        }\n        \u21d2\n        {\n        \n          b\n          u\n          r\n          g\n          e\n          r\n        \n        }\n      \n    \n    {\\displaystyle \\{\\mathrm {onions,potatoes} \\}\\Rightarrow \\{\\mathrm {burger} \\}}\n   found in the sales data of a supermarket would indicate that if a customer buys onions and potatoes together, they are likely to also buy hamburger meat. Such information can be used as the basis for decisions about marketing activities such as, e.g., promotional pricing or product placements.\nIn addition to the above example from market basket analysis association rules are employed today in many application areas including Web usage mining, intrusion detection, continuous production, and bioinformatics. In contrast with sequence mining, association rule learning typically does not consider the order of items either within a transaction or across transactions.\n\n\n== Definition ==\nFollowing the original definition by Agrawal, Imieli\u0144ski, Swami the problem of association rule mining is defined as:\nLet \n  \n    \n      \n        I\n        =\n        {\n        \n          i\n          \n            1\n          \n        \n        ,\n        \n          i\n          \n            2\n          \n        \n        ,\n        \u2026\n        ,\n        \n          i\n          \n            n\n          \n        \n        }\n      \n    \n    {\\displaystyle I=\\{i_{1},i_{2},\\ldots ,i_{n}\\}}\n   be a set of \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n   binary attributes called items.\nLet \n  \n    \n      \n        D\n        =\n        {\n        \n          t\n          \n            1\n          \n        \n        ,\n        \n          t\n          \n            2\n          \n        \n        ,\n        \u2026\n        ,\n        \n          t\n          \n            m\n          \n        \n        }\n      \n    \n    {\\displaystyle D=\\{t_{1},t_{2},\\ldots ,t_{m}\\}}\n   be a set of transactions called the database.\nEach transaction in \n  \n    \n      \n        D\n      \n    \n    {\\displaystyle D}\n   has a unique transaction ID and contains a subset of the items in \n  \n    \n      \n        I\n      \n    \n    {\\displaystyle I}\n  .\nA rule is defined as an implication of the form:\n\n  \n    \n      \n        X\n        \u21d2\n        Y\n      \n    \n    {\\displaystyle X\\Rightarrow Y}\n  , where \n  \n    \n      \n        X\n        ,\n        Y\n        \u2286\n        I\n      \n    \n    {\\displaystyle X,Y\\subseteq I}\n  .\nIn Agrawal, Imieli\u0144ski, Swami a rule is defined only between a set and a single item, \n  \n    \n      \n        X\n        \u21d2\n        \n          i\n          \n            j\n          \n        \n      \n    \n    {\\displaystyle X\\Rightarrow i_{j}}\n   for \n  \n    \n      \n        \n          i\n          \n            j\n          \n        \n        \u2208\n        I\n      \n    \n    {\\displaystyle i_{j}\\in I}\n  .\nEvery rule is composed by two different sets of items, also known as itemsets, \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n   and \n  \n    \n      \n        Y\n      \n    \n    {\\displaystyle Y}\n  , where \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n   is called antecedent or left-hand-side (LHS) and \n  \n    \n      \n        Y\n      \n    \n    {\\displaystyle Y}\n   consequent or right-hand-side (RHS).\nTo illustrate the concepts, we use a small example from the supermarket domain. The set of items is \n  \n    \n      \n        I\n        =\n        {\n        \n          m\n          i\n          l\n          k\n          ,\n          b\n          r\n          e\n          a\n          d\n          ,\n          b\n          u\n          t\n          t\n          e\n          r\n          ,\n          b\n          e\n          e\n          r\n          ,\n          d\n          i\n          a\n          p\n          e\n          r\n          s\n        \n        }\n      \n    \n    {\\displaystyle I=\\{\\mathrm {milk,bread,butter,beer,diapers} \\}}\n   and in the table is shown a small database containing the items, where, in each entry, the value 1 means the presence of the item in the corresponding transaction, and the value 0 represents the absence of an item in that transaction.\nAn example rule for the supermarket could be \n  \n    \n      \n        {\n        \n          b\n          u\n          t\n          t\n          e\n          r\n          ,\n          b\n          r\n          e\n          a\n          d\n        \n        }\n        \u21d2\n        {\n        \n          m\n          i\n          l\n          k\n        \n        }\n      \n    \n    {\\displaystyle \\{\\mathrm {butter,bread} \\}\\Rightarrow \\{\\mathrm {milk} \\}}\n   meaning that if butter and bread are bought, customers also buy milk.\nNote: this example is extremely small. In practical applications, a rule needs a support of several hundred transactions before it can be considered statistically significant, and datasets often contain thousands or millions of transactions.\n\n\n== Useful Concepts ==\nIn order to select interesting rules from the set of all possible rules, constraints on various measures of significance and interest are used. The best-known constraints are minimum thresholds on support and confidence.\nLet \n  \n    \n      \n        X\n        ,\n        Y\n      \n    \n    {\\displaystyle X,Y}\n   be itemsets, \n  \n    \n      \n        X\n        \u21d2\n        Y\n      \n    \n    {\\displaystyle X\\Rightarrow Y}\n   an association rule and \n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n   a set of transactions of a given database.\n\n\n=== Support ===\nSupport is an indication of how frequently the itemset appears in the dataset.\nThe support of \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n   with respect to \n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n   is defined as the proportion of transactions \n  \n    \n      \n        t\n      \n    \n    {\\displaystyle t}\n   in the dataset which contains the itemset \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n  .\n\n  \n    \n      \n        \n          s\n          u\n          p\n          p\n        \n        (\n        X\n        )\n        =\n        \n          \n            \n              \n                |\n              \n              {\n              t\n              \u2208\n              T\n              ;\n              X\n              \u2286\n              t\n              }\n              \n                |\n              \n            \n            \n              \n                |\n              \n              T\n              \n                |\n              \n            \n          \n        \n      \n    \n    {\\displaystyle \\mathrm {supp} (X)={\\frac {|\\{t\\in T;X\\subseteq t\\}|}{|T|}}}\n  \nIn the example dataset, the itemset \n  \n    \n      \n        X\n        =\n        {\n        \n          b\n          e\n          e\n          r\n          ,\n          d\n          i\n          a\n          p\n          e\n          r\n          s\n        \n        }\n      \n    \n    {\\displaystyle X=\\{\\mathrm {beer,diapers} \\}}\n   has a support of \n  \n    \n      \n        1\n        \n          /\n        \n        5\n        =\n        0.2\n      \n    \n    {\\displaystyle 1/5=0.2}\n   since it occurs in 20% of all transactions (1 out of 5 transactions). The argument of \n  \n    \n      \n        \n          s\n          u\n          p\n          p\n        \n        (\n        )\n      \n    \n    {\\displaystyle \\mathrm {supp} ()}\n   is a set of preconditions, and thus becomes more restrictive as it grows (instead of more inclusive).\n\n\n=== Confidence ===\nConfidence is an indication of how often the rule has been found to be true.\nThe confidence value of a rule, \n  \n    \n      \n        X\n        \u21d2\n        Y\n      \n    \n    {\\displaystyle X\\Rightarrow Y}\n   , with respect to a set of transactions \n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  , is the proportion of the transactions that contains \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n   which also contains \n  \n    \n      \n        Y\n      \n    \n    {\\displaystyle Y}\n  .\nConfidence is defined as:\n\n  \n    \n      \n        \n          c\n          o\n          n\n          f\n        \n        (\n        X\n        \u21d2\n        Y\n        )\n        =\n        \n          s\n          u\n          p\n          p\n        \n        (\n        X\n        \u222a\n        Y\n        )\n        \n          /\n        \n        \n          s\n          u\n          p\n          p\n        \n        (\n        X\n        )\n      \n    \n    {\\displaystyle \\mathrm {conf} (X\\Rightarrow Y)=\\mathrm {supp} (X\\cup Y)/\\mathrm {supp} (X)}\n  \nFor example, the rule \n  \n    \n      \n        {\n        \n          b\n          u\n          t\n          t\n          e\n          r\n          ,\n          b\n          r\n          e\n          a\n          d\n        \n        }\n        \u21d2\n        {\n        \n          m\n          i\n          l\n          k\n        \n        }\n      \n    \n    {\\displaystyle \\{\\mathrm {butter,bread} \\}\\Rightarrow \\{\\mathrm {milk} \\}}\n   has a confidence of \n  \n    \n      \n        0.2\n        \n          /\n        \n        0.2\n        =\n        1.0\n      \n    \n    {\\displaystyle 0.2/0.2=1.0}\n   in the database, which means that for 100% of the transactions containing butter and bread the rule is correct (100% of the times a customer buys butter and bread, milk is bought as well).\nNote that \n  \n    \n      \n        \n          s\n          u\n          p\n          p\n        \n        (\n        X\n        \u222a\n        Y\n        )\n      \n    \n    {\\displaystyle \\mathrm {supp} (X\\cup Y)}\n   means the support of the union of the items in X and Y. This is somewhat confusing since we normally think in terms of probabilities of events and not sets of items. We can rewrite \n  \n    \n      \n        \n          s\n          u\n          p\n          p\n        \n        (\n        X\n        \u222a\n        Y\n        )\n      \n    \n    {\\displaystyle \\mathrm {supp} (X\\cup Y)}\n   as the probability \n  \n    \n      \n        P\n        (\n        \n          E\n          \n            X\n          \n        \n        \u2229\n        \n          E\n          \n            Y\n          \n        \n        )\n      \n    \n    {\\displaystyle P(E_{X}\\cap E_{Y})}\n  , where \n  \n    \n      \n        \n          E\n          \n            X\n          \n        \n      \n    \n    {\\displaystyle E_{X}}\n   and \n  \n    \n      \n        \n          E\n          \n            Y\n          \n        \n      \n    \n    {\\displaystyle E_{Y}}\n   are the events that a transaction contains itemset \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n   and \n  \n    \n      \n        Y\n      \n    \n    {\\displaystyle Y}\n  , respectively.Thus confidence can be interpreted as an estimate of the conditional probability \n  \n    \n      \n        P\n        (\n        \n          E\n          \n            Y\n          \n        \n        \n          |\n        \n        \n          E\n          \n            X\n          \n        \n        )\n      \n    \n    {\\displaystyle P(E_{Y}|E_{X})}\n  , the probability of finding the RHS of the rule in transactions under the condition that these transactions also contain the LHS.\n\n\n=== Lift ===\nThe lift of a rule is defined as:\n\n  \n    \n      \n        \n          l\n          i\n          f\n          t\n        \n        (\n        X\n        \u21d2\n        Y\n        )\n        =\n        \n          \n            \n              \n                s\n                u\n                p\n                p\n              \n              (\n              X\n              \u222a\n              Y\n              )\n            \n            \n              \n                s\n                u\n                p\n                p\n              \n              (\n              X\n              )\n              \xd7\n              \n                s\n                u\n                p\n                p\n              \n              (\n              Y\n              )\n            \n          \n        \n      \n    \n    {\\displaystyle \\mathrm {lift} (X\\Rightarrow Y)={\\frac {\\mathrm {supp} (X\\cup Y)}{\\mathrm {supp} (X)\\times \\mathrm {supp} (Y)}}}\n  \nor the ratio of the observed support to that expected if X and Y were independent.\nFor example, the rule \n  \n    \n      \n        {\n        \n          m\n          i\n          l\n          k\n          ,\n          b\n          r\n          e\n          a\n          d\n        \n        }\n        \u21d2\n        {\n        \n          b\n          u\n          t\n          t\n          e\n          r\n        \n        }\n      \n    \n    {\\displaystyle \\{\\mathrm {milk,bread} \\}\\Rightarrow \\{\\mathrm {butter} \\}}\n   has a lift of \n  \n    \n      \n        \n          \n            0.2\n            \n              0.4\n              \xd7\n              0.4\n            \n          \n        \n        =\n        1.25\n      \n    \n    {\\displaystyle {\\frac {0.2}{0.4\\times 0.4}}=1.25}\n  .\nIf the rule had a lift of 1, it would imply that the probability of occurrence of the antecedent and that of the consequent are independent of each other. When two events are independent of each other, no rule can be drawn involving those two events.\nIf the lift is > 1, that lets us know the degree to which those two occurrences are dependent on one another, and makes those rules potentially useful for predicting the consequent in future data sets.\nIf the lift is < 1, that lets us know the items are substitute to each other. This means that presence of one item has negative effect on presence of other item and vice versa.\nThe value of lift is that it considers both the support of the rule and the overall data set.\n\n\n=== Conviction ===\nThe conviction of a rule is defined as \n  \n    \n      \n        \n          c\n          o\n          n\n          v\n        \n        (\n        X\n        \u21d2\n        Y\n        )\n        =\n        \n          \n            \n              1\n              \u2212\n              \n                s\n                u\n                p\n                p\n              \n              (\n              Y\n              )\n            \n            \n              1\n              \u2212\n              \n                c\n                o\n                n\n                f\n              \n              (\n              X\n              \u21d2\n              Y\n              )\n            \n          \n        \n      \n    \n    {\\displaystyle \\mathrm {conv} (X\\Rightarrow Y)={\\frac {1-\\mathrm {supp} (Y)}{1-\\mathrm {conf} (X\\Rightarrow Y)}}}\n  .For example, the rule \n  \n    \n      \n        {\n        \n          m\n          i\n          l\n          k\n          ,\n          b\n          r\n          e\n          a\n          d\n        \n        }\n        \u21d2\n        {\n        \n          b\n          u\n          t\n          t\n          e\n          r\n        \n        }\n      \n    \n    {\\displaystyle \\{\\mathrm {milk,bread} \\}\\Rightarrow \\{\\mathrm {butter} \\}}\n   has a conviction of \n  \n    \n      \n        \n          \n            \n              1\n              \u2212\n              0.4\n            \n            \n              1\n              \u2212\n              0.5\n            \n          \n        \n        =\n        1.2\n      \n    \n    {\\displaystyle {\\frac {1-0.4}{1-0.5}}=1.2}\n  , and can be interpreted as the ratio of the expected frequency that X occurs without Y (that is to say, the frequency that the rule makes an incorrect prediction) if X and Y were independent divided by the observed frequency of incorrect predictions. In this example, the conviction value of 1.2 shows that the rule \n  \n    \n      \n        {\n        \n          m\n          i\n          l\n          k\n          ,\n          b\n          r\n          e\n          a\n          d\n        \n        }\n        \u21d2\n        {\n        \n          b\n          u\n          t\n          t\n          e\n          r\n        \n        }\n      \n    \n    {\\displaystyle \\{\\mathrm {milk,bread} \\}\\Rightarrow \\{\\mathrm {butter} \\}}\n   would be incorrect 20% more often (1.2 times as often) if the association between X and Y was purely random chance.\n\n\n=== Alternative measures of interestingness ===\nIn addition to confidence, other measures of interestingness for rules have been proposed. Some popular measures are:\n\nAll-confidence\nCollective strength\nLeverageSeveral more measures are presented and compared by Tan et al. and by Hahsler. Looking for techniques that can model what the user has known (and using these models as interestingness measures) is currently an active research trend under the name of "Subjective Interestingness."\n\n\n== Process ==\n Association rules are usually required to satisfy a user-specified minimum support and a user-specified minimum confidence at the same time. Association rule generation is usually split up into two separate steps:\nA minimum support threshold is applied to find all frequent itemsets in a database.\nA minimum confidence constraint is applied to these frequent itemsets in order to form rules.While the second step is straightforward, the first step needs more attention.\nFinding all frequent itemsets in a database is difficult since it involves searching all possible itemsets (item combinations). The set of possible itemsets is the power set over \n  \n    \n      \n        I\n      \n    \n    {\\displaystyle I}\n   and has size \n  \n    \n      \n        \n          2\n          \n            n\n          \n        \n        \u2212\n        1\n      \n    \n    {\\displaystyle 2^{n}-1}\n   (excluding the empty set which is not a valid itemset). Although the size of the power-set grows exponentially in the number of items \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n   in \n  \n    \n      \n        I\n      \n    \n    {\\displaystyle I}\n  , efficient search is possible using the downward-closure property of support (also called anti-monotonicity) which guarantees that for a frequent itemset, all its subsets are also frequent and thus no infrequent itemset can be a subset of a frequent itemset. Exploiting this property, efficient algorithms (e.g., Apriori and Eclat) can find all frequent itemsets.\n\n\n== History ==\nThe concept of association rules was popularised particularly due to the 1993 article of Agrawal et al., which has acquired more than 18,000 citations according to Google Scholar, as of August 2015, and is thus one of the most cited papers in the Data Mining field. However, what is now called "association rules" is introduced already in the 1966 paper on GUHA, a general data mining method developed by Petr H\xe1jek et al.An early (circa 1989) use of minimum support and confidence to find all association rules is the Feature Based Modeling framework, which found all rules with \n  \n    \n      \n        \n          s\n          u\n          p\n          p\n        \n        (\n        X\n        )\n      \n    \n    {\\displaystyle \\mathrm {supp} (X)}\n   and \n  \n    \n      \n        \n          c\n          o\n          n\n          f\n        \n        (\n        X\n        \u21d2\n        Y\n        )\n      \n    \n    {\\displaystyle \\mathrm {conf} (X\\Rightarrow Y)}\n   greater than user defined constraints.\n\n\n== Statistically sound associations ==\nOne limitation of the standard approach to discovering associations is that by searching massive numbers of possible associations to look for collections of items that appear to be associated, there is a large risk of finding many spurious associations. These are collections of items that co-occur with unexpected frequency in the data, but only do so by chance. For example, suppose we are considering a collection of 10,000 items and looking for rules containing two items in the left-hand-side and 1 item in the right-hand-side. There are approximately 1,000,000,000,000 such rules. If we apply a statistical test for independence with a significance level of 0.05 it means there is only a 5% chance of accepting a rule if there is no association. If we assume there are no associations, we should nonetheless expect to find 50,000,000,000 rules. Statistically sound association discovery controls this risk, in most cases reducing the risk of finding any spurious associations to a user-specified significance level.\n\n\n== Algorithms ==\nMany algorithms for generating association rules have been proposed.\nSome well-known algorithms are Apriori, Eclat and FP-Growth, but they only do half the job, since they are algorithms for mining frequent itemsets. Another step needs to be done after to generate rules from frequent itemsets found in a database.\n\n\n=== Apriori algorithm ===\n\nApriori uses a breadth-first search strategy to count the support of itemsets and uses a candidate generation function which exploits the downward closure property of support.\n\n\n=== Eclat algorithm ===\nEclat (alt. ECLAT, stands for Equivalence Class Transformation) is a depth-first search algorithm based on set intersection. It is suitable for both sequential as well as parallel execution with locality-enhancing properties.\n\n\n=== FP-growth algorithm ===\nFP stands for frequent pattern.In the first pass, the algorithm counts the occurrences of items (attribute-value pairs) in the dataset of transactions, and stores these counts in a 'header table'. In the second pass, it builds the FP-tree structure by inserting transactions into a trie.\nItems in each transaction have to be sorted by descending order of their frequency in the dataset before being inserted so that the tree can be processed quickly.\nItems in each transaction that do not meet the minimum support requirement are discarded.\nIf many transactions share most frequent items, the FP-tree provides high compression close to tree root.\nRecursive processing of this compressed version of the main dataset grows frequent item sets directly, instead of generating candidate items and testing them against the entire database (as in the apriori algorithm).\nGrowth begins from the bottom of the header table i.e. the item with the smallest support by finding all sorted transactions that end in that item. Call this item \n  \n    \n      \n        I\n      \n    \n    {\\displaystyle I}\n  .\nA new conditional tree is created which is the original FP-tree projected onto \n  \n    \n      \n        I\n      \n    \n    {\\displaystyle I}\n  . The supports of all nodes in the projected tree are re-counted with each node getting the sum of its children counts. Nodes (and hence subtrees) that do not meet the minimum support are pruned. Recursive growth ends when no individual items conditional on \n  \n    \n      \n        I\n      \n    \n    {\\displaystyle I}\n   meet the minimum support threshold. The resulting paths from root to \n  \n    \n      \n        I\n      \n    \n    {\\displaystyle I}\n   will be frequent itemsets. After this step, processing continues with the next least-supported header item of the original FP-tree.\nOnce the recursive process has completed, all frequent item sets will have been found, and association rule creation begins.\n\n\n=== Others ===\n\n\n==== ASSOC ====\nThe ASSOC procedure is a GUHA method which mines for generalized association rules using fast bitstrings operations. The association rules mined by this method are more general than those output by apriori, for example "items" can be connected both with conjunction and disjunctions and the relation between antecedent and consequent of the rule is not restricted to setting minimum support and confidence as in apriori: an arbitrary combination of supported interest measures can be used.\n\n\n==== OPUS search ====\nOPUS is an efficient algorithm for rule discovery that, in contrast to most alternatives, does not require either monotone or anti-monotone constraints such as minimum support. Initially used to find rules for a fixed consequent it has subsequently been extended to find rules with any item as a consequent. OPUS search is the core technology in the popular Magnum Opus association discovery system.\n\n\n== Lore ==\nA famous story about association rule mining is the "beer and diaper" story. A purported survey of behavior of supermarket shoppers discovered that customers (presumably young men) who buy diapers tend also to buy beer. This anecdote became popular as an example of how unexpected association rules might be found from everyday data. There are varying opinions as to how much of the story is true. Daniel Powers says:\nIn 1992, Thomas Blischok, manager of a retail consulting group at Teradata, and his staff prepared an analysis of 1.2 million market baskets from about 25 Osco Drug stores. Database queries were developed to identify affinities. The analysis "did discover that between 5:00 and 7:00 p.m. that consumers bought beer and diapers". Osco managers did NOT exploit the beer and diapers relationship by moving the products closer together on the shelves.\n\n\n== Other types of association rule mining ==\nMulti-Relation Association Rules: Multi-Relation Association Rules (MRAR) are association rules where each item may have several relations. These relations indicate indirect relationship between the entities. Consider the following MRAR where the first item consists of three relations live in, nearby and humid: \u201cThose who live in a place which is nearby a city with humid climate type and also are younger than 20 -> their health condition is good\u201d. Such association rules are extractable from RDBMS data or semantic web data.Contrast set learning is a form of associative learning. Contrast set learners use rules that differ meaningfully in their distribution across subsets.Weighted class learning is another form of associative learning in which weight may be assigned to classes to give focus to a particular issue of concern for the consumer of the data mining results.\nHigh-order pattern discovery facilitate the capture of high-order (polythetic) patterns or event associations that are intrinsic to complex real-world data.\nK-optimal pattern discovery provides an alternative to the standard approach to association rule learning that requires that each pattern appear frequently in the data.\nApproximate Frequent Itemset mining is a relaxed version of Frequent Itemset mining that allows some of the items in some of the rows to be 0.Generalized Association Rules hierarchical taxonomy (concept hierarchy)\nQuantitative Association Rules categorical and quantitative data\nInterval Data Association Rules e.g. partition the age into 5-year-increment ranged\nSequential pattern mining  discovers subsequences that are common to more than minsup sequences in a sequence database, where minsup is set by the user. A sequence is an ordered list of transactions.Subspace Clustering, a specific type of Clustering high-dimensional data, is in many variants also based on the downward-closure property for specific clustering models.Warmr is shipped as part of the ACE data mining suite. It allows association rule learning for first order relational rules.\n\n\n== See also ==\nSequence mining\nProduction system (computer science)\nLearning classifier system\nRule-based machine learning\n\n\n== References ==\n\n\n=== Bibliographies ===\nAnnotated Bibliography on Association Rules by M. Hahsler