The proper generalized decomposition (PGD) is an iterative numerical method for solving boundary value problems (BVPs), that is, partial differential equations constrained by a set of boundary conditions. The PGD algorithm computes an approximation of the solution of the BVP by successive enrichment. This means that, in each iteration, a new component (or mode) is computed and added to the approximation. The more modes obtained, the closer the approximation is to its theoretical solution. By selecting only the first PGD modes, a reduced order model of the solution is obtained. Because of this, PGD is considered a dimensionality reduction algorithm.\nThe PGD can be considered as a generalized form of the Proper Orthogonal Decomposition.\n\n\n== Description ==\nThe proper generalized decomposition is a method characterized by (1) a variational formulation of the problem, (2) a discretization of the domain in the style of the finite element method, (3) the assumption that the solution can be approximated as a separated representation and (4) a numerical greedy algorithm to find the solution.The most implemented variational formulation in PGD is the Bubnov-Galerkin method, although other implementations exist.The discretization of the domain is a well defined set of procedures that cover (a) the creation of finite element meshes, (b) the definition of basis function on reference elements (also called shape functions) and (c) the mapping of reference elements onto the elements of the mesh.\nPGD assumes that the solution u of a (multidimensional) problem can be approximated as a separated representation of the form\n\n  \n    \n      \n        \n          u\n        \n        \u2248\n        \n          \n            u\n          \n          \n            N\n          \n        \n        (\n        \n          x\n          \n            1\n          \n        \n        ,\n        \n          x\n          \n            2\n          \n        \n        ,\n        \u2026\n        ,\n        \n          x\n          \n            d\n          \n        \n        )\n        =\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            N\n          \n        \n        \n          \n            \n              X\n              \n                1\n              \n            \n          \n          \n            i\n          \n        \n        (\n        \n          x\n          \n            1\n          \n        \n        )\n        \u22c5\n        \n          \n            \n              X\n              \n                2\n              \n            \n          \n          \n            i\n          \n        \n        (\n        \n          x\n          \n            2\n          \n        \n        )\n        \u22ef\n        \n          \n            \n              X\n              \n                d\n              \n            \n          \n          \n            i\n          \n        \n        (\n        \n          x\n          \n            d\n          \n        \n        )\n        ,\n      \n    \n    {\\displaystyle \\mathbf {u} \\approx \\mathbf {u} ^{N}(x_{1},x_{2},\\ldots ,x_{d})=\\sum _{i=1}^{N}\\mathbf {X_{1}} _{i}(x_{1})\\cdot \\mathbf {X_{2}} _{i}(x_{2})\\cdots \\mathbf {X_{d}} _{i}(x_{d}),}\n  where the number of addends N and the functional products X1(x1), X2(x2), ..., Xd(xd), each depending on a variable (or variables), are unknown beforehand.\nThe solution is sought by applying a greedy algorithm, usually the fixed point algorithm, to the weak formulation of the problem. For each iteration i of the algorithm, a mode of the solution is computed. Each mode consists of a set of numerical values of the functional products X1(x1), ..., Xd(xd), which enrich the approximation of the solution. Note that due to the greedy nature of the algorithm, the term 'enrich' is used rather than 'improve'. The number of computed modes required to obtain an approximation of the solution below a certain error threshold depends on the stop criterium of the iterative algorithm.\nUnlike POD, PGD modes are not necessarily orthogonal to each other.\n\n\n== Features ==\nPGD is suitable for solving high-dimensional problems, since it overcomes the limitations of classical approaches. In particular, PGD avoids the curse of dimensionality, as solving decoupled problems is computationally much less expensive than solving multidimensional problems.\nTherefore, PGD enables to re-adapt parametric problems into a multidimensional framework by setting the parameters of the problem as extra coordinates:\n\n  \n    \n      \n        \n          u\n        \n        \u2248\n        \n          \n            u\n          \n          \n            N\n          \n        \n        (\n        \n          x\n          \n            1\n          \n        \n        ,\n        \u2026\n        ,\n        \n          x\n          \n            d\n          \n        \n        ;\n        \n          k\n          \n            1\n          \n        \n        ,\n        \u2026\n        ,\n        \n          k\n          \n            p\n          \n        \n        )\n        =\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            N\n          \n        \n        \n          \n            \n              X\n              \n                1\n              \n            \n          \n          \n            i\n          \n        \n        (\n        \n          x\n          \n            1\n          \n        \n        )\n        \u22ef\n        \n          \n            \n              X\n              \n                d\n              \n            \n          \n          \n            i\n          \n        \n        (\n        \n          x\n          \n            d\n          \n        \n        )\n        \u22c5\n        \n          \n            \n              K\n              \n                1\n              \n            \n          \n          \n            i\n          \n        \n        (\n        \n          k\n          \n            1\n          \n        \n        )\n        \u22ef\n        \n          \n            \n              K\n              \n                p\n              \n            \n          \n          \n            i\n          \n        \n        (\n        \n          k\n          \n            p\n          \n        \n        )\n        ,\n      \n    \n    {\\displaystyle \\mathbf {u} \\approx \\mathbf {u} ^{N}(x_{1},\\ldots ,x_{d};k_{1},\\ldots ,k_{p})=\\sum _{i=1}^{N}\\mathbf {X_{1}} _{i}(x_{1})\\cdots \\mathbf {X_{d}} _{i}(x_{d})\\cdot \\mathbf {K_{1}} _{i}(k_{1})\\cdots \\mathbf {K_{p}} _{i}(k_{p}),}\n  where a series of functional products K1(k1), K2(k2), ..., Kp(kp), each depending on a parameter (or parameters), has been incorporated to the equation.\nIn this case, the obtained approximation of the solution is called computational vademecum: a general meta-model containing all the particular solutions for every possible value of the involved parameters.\n\n\n== Sparse Subspace Learning ==\nThe Sparse Subspace Learning (SSL) method leverages the use of hierarchical collocation to approximate the numerical solution of parametric models. With respect to traditional projection-based reduced order modeling, the use of a collocation enables non-intrusive approach based on sparse adaptive sampling of the parametric space. This allows to recover the lowdimensional structure of the parametric solution subspace while also learning the functional dependency from the parameters in explicit form. A sparse low-rank approximate tensor representation of the parametric solution can be built through an incremental strategy that only needs to have access to the output of a deterministic solver. Non-intrusiveness makes this approach straightforwardly applicable to challenging problems characterized by nonlinearity or non affine weak forms.\n\n\n== References ==