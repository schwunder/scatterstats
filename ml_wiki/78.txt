Statistical learning theory is a framework for machine learning\ndrawing from the fields of statistics and functional analysis. Statistical learning theory deals with the problem of finding a predictive function based on data. Statistical learning theory has led to successful applications in fields such as computer vision, speech recognition, and bioinformatics.\n\n\n== Introduction ==\nThe goals of learning are understanding and prediction. Learning falls into many categories, including supervised learning, unsupervised learning, online learning, and reinforcement learning. From the perspective of statistical learning theory, supervised learning is best understood. Supervised learning involves learning from a training set of data. Every point in the training is an input-output pair, where the input maps to an output. The learning problem consists of inferring the function that maps between the input and the output, such that the learned function can be used to predict the output from future input.\nDepending on the type of output, supervised learning problems are either problems of regression or problems of classification. If the output takes a continuous range of values, it is a regression problem. Using Ohm's Law as an example, a regression could be performed with voltage as input and current as an output. The regression would find the functional relationship between voltage and current to be \n  \n    \n      \n        R\n      \n    \n    {\\displaystyle R}\n  , such that\n\n  \n    \n      \n        V\n        =\n        I\n        R\n      \n    \n    {\\displaystyle V=IR}\n  Classification problems are those for which the output will be an element from a discrete set of labels. Classification is very common for machine learning applications. In facial recognition, for instance, a picture of a person's face would be the input, and the output label would be that person's name. The input would be represented by a large multidimensional vector whose elements represent pixels in the picture.\nAfter learning a function based on the training set data, that function is validated on a test set of data, data that did not appear in the training set.\n\n\n== Formal description ==\nTake \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n   to be the vector space of all possible inputs, and \n  \n    \n      \n        Y\n      \n    \n    {\\displaystyle Y}\n   to be\nthe vector space of all possible outputs. Statistical learning theory takes the perspective that there is some unknown probability distribution over the product space \n  \n    \n      \n        Z\n        =\n        X\n        \xd7\n        Y\n      \n    \n    {\\displaystyle Z=X\\times Y}\n  , i.e. there exists some unknown \n  \n    \n      \n        p\n        (\n        z\n        )\n        =\n        p\n        (\n        \n          \n            \n              x\n              \u2192\n            \n          \n        \n        ,\n        y\n        )\n      \n    \n    {\\displaystyle p(z)=p({\\vec {x}},y)}\n  . The training set is made up of \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n   samples from this probability distribution, and is notated \n\n  \n    \n      \n        S\n        =\n        {\n        (\n        \n          \n            \n              \n                x\n                \u2192\n              \n            \n          \n          \n            1\n          \n        \n        ,\n        \n          y\n          \n            1\n          \n        \n        )\n        ,\n        \u2026\n        ,\n        (\n        \n          \n            \n              \n                x\n                \u2192\n              \n            \n          \n          \n            n\n          \n        \n        ,\n        \n          y\n          \n            n\n          \n        \n        )\n        }\n        =\n        {\n        \n          \n            \n              \n                z\n                \u2192\n              \n            \n          \n          \n            1\n          \n        \n        ,\n        \u2026\n        ,\n        \n          \n            \n              \n                z\n                \u2192\n              \n            \n          \n          \n            n\n          \n        \n        }\n      \n    \n    {\\displaystyle S=\\{({\\vec {x}}_{1},y_{1}),\\dots ,({\\vec {x}}_{n},y_{n})\\}=\\{{\\vec {z}}_{1},\\dots ,{\\vec {z}}_{n}\\}}\n  Every \n  \n    \n      \n        \n          \n            \n              \n                x\n                \u2192\n              \n            \n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle {\\vec {x}}_{i}}\n   is an input vector from the training data, and \n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle y_{i}}\n  \nis the output that corresponds to it.\nIn this formalism, the inference problem consists of finding a function \n  \n    \n      \n        f\n        :\n        X\n        \u2192\n        Y\n      \n    \n    {\\displaystyle f:X\\to Y}\n   such that \n  \n    \n      \n        f\n        (\n        \n          \n            \n              x\n              \u2192\n            \n          \n        \n        )\n        \u223c\n        y\n      \n    \n    {\\displaystyle f({\\vec {x}})\\sim y}\n  . Let \n  \n    \n      \n        \n          \n            H\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {H}}}\n   be a space of functions \n  \n    \n      \n        f\n        :\n        X\n        \u2192\n        Y\n      \n    \n    {\\displaystyle f:X\\to Y}\n   called the hypothesis space. The hypothesis space is the space of functions the algorithm will search through. Let \n  \n    \n      \n        V\n        (\n        f\n        (\n        \n          \n            \n              x\n              \u2192\n            \n          \n        \n        )\n        ,\n        y\n        )\n      \n    \n    {\\displaystyle V(f({\\vec {x}}),y)}\n   be the loss function, a metric for the difference between the predicted value \n  \n    \n      \n        f\n        (\n        \n          \n            \n              x\n              \u2192\n            \n          \n        \n        )\n      \n    \n    {\\displaystyle f({\\vec {x}})}\n   and the actual value \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n  . The expected risk is defined to be\n\n  \n    \n      \n        I\n        [\n        f\n        ]\n        =\n        \n          \n            \u222b\n            \n              X\n              \xd7\n              Y\n            \n          \n          V\n          (\n          f\n          (\n          \n            \n              \n                x\n                \u2192\n              \n            \n          \n          )\n          ,\n          y\n          )\n          \n          p\n          (\n          \n            \n              \n                x\n                \u2192\n              \n            \n          \n          ,\n          y\n          )\n          \n          d\n          \n            \n              \n                x\n                \u2192\n              \n            \n          \n          \n          d\n          y\n        \n      \n    \n    {\\displaystyle I[f]=\\displaystyle \\int _{X\\times Y}V(f({\\vec {x}}),y)\\,p({\\vec {x}},y)\\,d{\\vec {x}}\\,dy}\n  The target function, the best possible function \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n   that can be\nchosen, is given by the \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n   that satisfies\n\n  \n    \n      \n        f\n        =\n        \n          inf\n          \n            h\n            \u2208\n            \n              \n                H\n              \n            \n          \n        \n        I\n        [\n        h\n        ]\n      \n    \n    {\\displaystyle f=\\inf _{h\\in {\\mathcal {H}}}I[h]}\n  Because the probability distribution \n  \n    \n      \n        p\n        (\n        \n          \n            \n              x\n              \u2192\n            \n          \n        \n        ,\n        y\n        )\n      \n    \n    {\\displaystyle p({\\vec {x}},y)}\n   is unknown, a\nproxy measure for the expected risk must be used. This measure is based on the training set, a sample from this unknown probability distribution. It is called the empirical risk\n\n  \n    \n      \n        \n          I\n          \n            S\n          \n        \n        [\n        f\n        ]\n        =\n        \n          \n            1\n            n\n          \n        \n        \n          \n            \u2211\n            \n              i\n              =\n              1\n            \n            \n              n\n            \n          \n          V\n          (\n          f\n          (\n          \n            \n              \n                \n                  x\n                  \u2192\n                \n              \n            \n            \n              i\n            \n          \n          )\n          ,\n          \n            y\n            \n              i\n            \n          \n          )\n        \n      \n    \n    {\\displaystyle I_{S}[f]={\\frac {1}{n}}\\displaystyle \\sum _{i=1}^{n}V(f({\\vec {x}}_{i}),y_{i})}\n  A learning algorithm that chooses the function \n  \n    \n      \n        \n          f\n          \n            S\n          \n        \n      \n    \n    {\\displaystyle f_{S}}\n   that minimizes\nthe empirical risk is called empirical risk minimization.\n\n\n== Loss functions ==\nThe choice of loss function is a determining factor on the function \n  \n    \n      \n        \n          f\n          \n            S\n          \n        \n      \n    \n    {\\displaystyle f_{S}}\n   that will be chosen by the learning algorithm. The loss function\nalso affects the convergence rate for an algorithm. It is important for the loss function to be convex.Different loss functions are used depending on whether the problem is\none of regression or one of classification.\n\n\n=== Regression ===\nThe most common loss function for regression is the square loss function (also known as the L2-norm). This familiar loss function is used in Ordinary Least Squares regression. The form is:\n\n  \n    \n      \n        V\n        (\n        f\n        (\n        \n          \n            \n              x\n              \u2192\n            \n          \n        \n        )\n        ,\n        y\n        )\n        =\n        (\n        y\n        \u2212\n        f\n        (\n        \n          \n            \n              x\n              \u2192\n            \n          \n        \n        )\n        \n          )\n          \n            2\n          \n        \n      \n    \n    {\\displaystyle V(f({\\vec {x}}),y)=(y-f({\\vec {x}}))^{2}}\n  The absolute value loss (also known as the L1-norm) is also sometimes used:\n\n  \n    \n      \n        V\n        (\n        f\n        (\n        \n          \n            \n              x\n              \u2192\n            \n          \n        \n        )\n        ,\n        y\n        )\n        =\n        \n          |\n        \n        y\n        \u2212\n        f\n        (\n        \n          \n            \n              x\n              \u2192\n            \n          \n        \n        )\n        \n          |\n        \n      \n    \n    {\\displaystyle V(f({\\vec {x}}),y)=|y-f({\\vec {x}})|}\n  \n\n\n=== Classification ===\n\nIn some sense the 0-1 indicator function is the most natural loss function for classification. It takes the value 0 if the predicted output is the same as the actual output, and it takes the value 1 if the predicted output is different from the actual output. For binary classification with \n  \n    \n      \n        Y\n        =\n        {\n        \u2212\n        1\n        ,\n        1\n        }\n      \n    \n    {\\displaystyle Y=\\{-1,1\\}}\n  , this is:\n\n  \n    \n      \n        V\n        (\n        f\n        (\n        \n          \n            \n              x\n              \u2192\n            \n          \n        \n        )\n        ,\n        y\n        )\n        =\n        \u03b8\n        (\n        \u2212\n        y\n        f\n        (\n        \n          \n            \n              x\n              \u2192\n            \n          \n        \n        )\n        )\n      \n    \n    {\\displaystyle V(f({\\vec {x}}),y)=\\theta (-yf({\\vec {x}}))}\n  where \n  \n    \n      \n        \u03b8\n      \n    \n    {\\displaystyle \\theta }\n   is the Heaviside step function.\n\n\n== Regularization ==\n\nIn machine learning problems, a major problem that arises is that of overfitting. Because learning is a prediction problem, the goal is not to find a function that most closely fits the (previously observed) data, but to find one that will most accurately predict output from future input. Empirical risk minimization runs this risk of overfitting: finding a function that matches the data exactly but does not predict future output well.\nOverfitting is symptomatic of unstable solutions; a small perturbation in the training set data would cause a large variation in the learned function. It can be shown that if the stability for the solution can be guaranteed, generalization and consistency are guaranteed as well. Regularization can solve the overfitting problem and give\nthe problem stability.\nRegularization can be accomplished by restricting the hypothesis space \n  \n    \n      \n        \n          \n            H\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {H}}}\n  . A common example would be restricting \n  \n    \n      \n        \n          \n            H\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {H}}}\n   to linear functions: this can be seen as a reduction to the standard problem of linear regression. \n  \n    \n      \n        \n          \n            H\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {H}}}\n   could also be restricted to polynomial of degree \n  \n    \n      \n        p\n      \n    \n    {\\displaystyle p}\n  , exponentials, or bounded functions on L1. Restriction of the hypothesis space avoids overfitting because the form of the potential functions are limited, and so does not allow for the choice of a function that gives empirical risk arbitrarily close to zero.\nOne example of regularization is Tikhonov regularization. This consists of minimizing\n\n  \n    \n      \n        \n          \n            1\n            n\n          \n        \n        \n          \n            \u2211\n            \n              i\n              =\n              1\n            \n            \n              n\n            \n          \n          V\n          (\n          f\n          (\n          \n            \n              \n                \n                  x\n                  \u2192\n                \n              \n            \n            \n              i\n            \n          \n          )\n          ,\n          \n            y\n            \n              i\n            \n          \n          )\n          +\n          \u03b3\n          \u2016\n          f\n          \n            \u2016\n            \n              \n                H\n              \n            \n            \n              2\n            \n          \n        \n      \n    \n    {\\displaystyle {\\frac {1}{n}}\\displaystyle \\sum _{i=1}^{n}V(f({\\vec {x}}_{i}),y_{i})+\\gamma \\|f\\|_{\\mathcal {H}}^{2}}\n  where \n  \n    \n      \n        \u03b3\n      \n    \n    {\\displaystyle \\gamma }\n   is a fixed and positive parameter, the regularization parameter. Tikhonov regularization ensures existence, uniqueness, and stability of the solution.\n\n\n== See also ==\nReproducing kernel Hilbert spaces are a useful choice for \n  \n    \n      \n        \n          \n            H\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {H}}}\n  .\nProximal gradient methods for learning\n\n\n== References ==