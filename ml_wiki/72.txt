Temporal difference (TD) learning refers to a class of model-free reinforcement learning methods which learn by bootstrapping from the current estimate of the value function. These methods sample from the environment, like Monte Carlo methods, and perform updates based on current estimates, like dynamic programming methods.While Monte Carlo methods only adjust their estimates once the final outcome is known, TD methods adjust predictions to match later, more accurate, predictions about the future before the final outcome is known. This is a form of bootstrapping, as illustrated with the following example:\n\n"Suppose you wish to predict the weather for Saturday, and you have some model that predicts Saturday's weather, given the weather of each day in the week. In the standard case, you would wait until Saturday and then adjust all your models. However, when it is, for example, Friday, you should have a pretty good idea of what the weather would be on Saturday \u2013 and thus be able to change, say, Saturday's model before Saturday arrives."Temporal difference methods are related to the temporal difference model of animal learning.\n\n\n== Mathematical formulation ==\nThe tabular TD(0) method is one of the simplest TD methods. It is a special case of more general stochastic approximation methods. It estimates the state value function of a finite-state Markov decision process (MDP) under a policy \n  \n    \n      \n        \u03c0\n      \n    \n    {\\displaystyle \\pi }\n  . Let \n  \n    \n      \n        \n          V\n          \n            \u03c0\n          \n        \n      \n    \n    {\\displaystyle V^{\\pi }}\n   denote the state value function of the MDP with states \n  \n    \n      \n        (\n        \n          s\n          \n            t\n          \n        \n        \n          )\n          \n            t\n            \u2208\n            \n              N\n            \n          \n        \n      \n    \n    {\\displaystyle (s_{t})_{t\\in \\mathbb {N} }}\n  , rewards \n  \n    \n      \n        (\n        \n          r\n          \n            t\n          \n        \n        \n          )\n          \n            t\n            \u2208\n            \n              N\n            \n          \n        \n      \n    \n    {\\displaystyle (r_{t})_{t\\in \\mathbb {N} }}\n   and discount rate \n  \n    \n      \n        \u03b3\n      \n    \n    {\\displaystyle \\gamma }\n   under the policy \n  \n    \n      \n        \u03c0\n      \n    \n    {\\displaystyle \\pi }\n  :\n\n  \n    \n      \n        \n          V\n          \n            \u03c0\n          \n        \n        (\n        s\n        )\n        =\n        \n          E\n          \n            a\n            \u223c\n            \u03c0\n          \n        \n        \n          {\n          \n            \n              \u2211\n              \n                t\n                =\n                0\n              \n              \n                \u221e\n              \n            \n            \n              \u03b3\n              \n                t\n              \n            \n            \n              r\n              \n                t\n              \n            \n            (\n            \n              a\n              \n                t\n              \n            \n            )\n            \n              \n                |\n              \n            \n            \n              s\n              \n                0\n              \n            \n            =\n            s\n          \n          }\n        \n        .\n      \n    \n    {\\displaystyle V^{\\pi }(s)=E_{a\\sim \\pi }\\left\\{\\sum _{t=0}^{\\infty }\\gamma ^{t}r_{t}(a_{t}){\\Bigg |}s_{0}=s\\right\\}.}\n  We drop the action from the notion for convenience. \n  \n    \n      \n        \n          V\n          \n            \u03c0\n          \n        \n      \n    \n    {\\displaystyle V^{\\pi }}\n   satisfies the Hamilton-Jacobi-Bellman Equation: \n\n  \n    \n      \n        \n          V\n          \n            \u03c0\n          \n        \n        (\n        s\n        )\n        =\n        \n          E\n          \n            \u03c0\n          \n        \n        {\n        \n          r\n          \n            0\n          \n        \n        +\n        \u03b3\n        \n          V\n          \n            \u03c0\n          \n        \n        (\n        \n          s\n          \n            1\n          \n        \n        )\n        \n          |\n        \n        \n          s\n          \n            0\n          \n        \n        =\n        s\n        }\n        ,\n      \n    \n    {\\displaystyle V^{\\pi }(s)=E_{\\pi }\\{r_{0}+\\gamma V^{\\pi }(s_{1})|s_{0}=s\\},}\n  so \n  \n    \n      \n        \n          r\n          \n            0\n          \n        \n        +\n        \u03b3\n        \n          V\n          \n            \u03c0\n          \n        \n        (\n        \n          s\n          \n            1\n          \n        \n        )\n      \n    \n    {\\displaystyle r_{0}+\\gamma V^{\\pi }(s_{1})}\n   is an unbiased estimate for \n  \n    \n      \n        \n          V\n          \n            \u03c0\n          \n        \n        (\n        s\n        )\n      \n    \n    {\\displaystyle V^{\\pi }(s)}\n  . This observation motivates the following algorithm for estimating \n  \n    \n      \n        \n          V\n          \n            \u03c0\n          \n        \n      \n    \n    {\\displaystyle V^{\\pi }}\n  .\nThe algorithm starts by initializing a table \n  \n    \n      \n        V\n        (\n        s\n        )\n      \n    \n    {\\displaystyle V(s)}\n   arbitrarily, with one value for each state of the MDP. A positive learning rate \n  \n    \n      \n        \u03b1\n      \n    \n    {\\displaystyle \\alpha }\n   is chosen.\nWe then repeatedly evaluate the policy \n  \n    \n      \n        \u03c0\n      \n    \n    {\\displaystyle \\pi }\n  , obtain a reward \n  \n    \n      \n        r\n      \n    \n    {\\displaystyle r}\n   and update the value function for the old state using the rule:\n\n  \n    \n      \n        V\n        (\n        s\n        )\n        \u2190\n        V\n        (\n        s\n        )\n        +\n        \u03b1\n        (\n        \n          \n            \n              \n                r\n                +\n                \u03b3\n                V\n                (\n                \n                  s\n                  \u2032\n                \n                )\n              \n              \u23de\n            \n          \n          \n            The TD target\n          \n        \n        \u2212\n        V\n        (\n        s\n        )\n        )\n      \n    \n    {\\displaystyle V(s)\\leftarrow V(s)+\\alpha (\\overbrace {r+\\gamma V(s')} ^{\\text{The TD target}}-V(s))}\n  where \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n   and \n  \n    \n      \n        \n          s\n          \u2032\n        \n      \n    \n    {\\displaystyle s'}\n  are the old and new states, respectively. The value \n  \n    \n      \n        r\n        +\n        \u03b3\n        V\n        (\n        \n          s\n          \u2032\n        \n        )\n      \n    \n    {\\displaystyle r+\\gamma V(s')}\n   is known as the TD target.\n\n\n== TD-Lambda ==\nTD-Lambda is a learning algorithm invented by Richard S. Sutton based on earlier work on temporal difference learning by Arthur Samuel. This algorithm was famously applied by Gerald Tesauro to create TD-Gammon, a program that learned to play the game of backgammon at the level of expert human players.The lambda (\n  \n    \n      \n        \u03bb\n      \n    \n    {\\displaystyle \\lambda }\n  ) parameter refers to the trace decay parameter, with \n  \n    \n      \n        0\n        \u2a7d\n        \u03bb\n        \u2a7d\n        1\n      \n    \n    {\\displaystyle 0\\leqslant \\lambda \\leqslant 1}\n  . Higher settings lead to longer lasting traces; that is, a larger proportion of credit from a reward can be given to more distant states and actions when \n  \n    \n      \n        \u03bb\n      \n    \n    {\\displaystyle \\lambda }\n   is higher, with \n  \n    \n      \n        \u03bb\n        =\n        1\n      \n    \n    {\\displaystyle \\lambda =1}\n   producing parallel learning to Monte Carlo RL algorithms.\n\n\n== TD algorithm in neuroscience ==\nThe TD algorithm has also received attention in the field of neuroscience. Researchers discovered that the firing rate of dopamine neurons in the ventral tegmental area (VTA) and substantia nigra (SNc) appear to mimic the error function in the algorithm. The error function reports back the difference between the estimated reward at any given state or time step and the actual reward received. The larger the error function, the larger the difference between the expected and actual reward. When this is paired with a stimulus that accurately reflects a future reward, the error can be used to associate the stimulus with the future reward.\nDopamine cells appear to behave in a similar manner. In one experiment measurements of dopamine cells were made while training a monkey to associate a stimulus with the reward of juice. Initially the dopamine cells increased firing rates when the monkey received juice, indicating a difference in expected and actual rewards. Over time this increase in firing back propagated to the earliest reliable stimulus for the reward. Once the monkey was fully trained, there was no increase in firing rate upon presentation of the predicted reward. Continually, the firing rate for the dopamine cells decreased below normal activation when the expected reward was not produced. This mimics closely how the error function in TD is used for reinforcement learning.\nThe relationship between the model and potential neurological function has produced research attempting to use TD to explain many aspects of behavioral research. It has also been used to study conditions such as schizophrenia or the consequences of pharmacological manipulations of dopamine on learning.\n\n\n== See also ==\nQ-learning\nSARSA\nRescorla-Wagner model\nPVLV\n\n\n== Notes ==\n\n\n== Bibliography ==\nSutton, R.S., Barto A.G. (1990). "Time Derivative Models of Pavlovian Reinforcement" (PDF). Learning and Computational Neuroscience: Foundations of Adaptive Networks: 497\u2013537.CS1 maint: multiple names: authors list (link)\nGerald Tesauro (March 1995). "Temporal Difference Learning and TD-Gammon". Communications of the ACM. 38 (3): 58\u201368. doi:10.1145/203330.203343.\nImran Ghory. Reinforcement Learning in Board Games.\nS. P. Meyn, 2007.  Control Techniques for Complex Networks, Cambridge University Press, 2007. See final chapter, and appendix with abridged Meyn & Tweedie.\n\n\n== External links ==\nScholarpedia Temporal difference Learning\nTD-Gammon\nTD-Networks Research Group\nConnect Four TDGravity Applet (+ mobile phone version) \u2013 self-learned using TD-Leaf method (combination of TD-Lambda with shallow tree search)\nSelf Learning Meta-Tic-Tac-Toe Example web app showing how temporal difference learning can be used to learn state evaluation constants for a minimax AI playing a simple board game.\nReinforcement Learning Problem, document explaining how temporal difference learning can be used to speed up Q-learning\nTD-Simulator Temporal difference simulator for classical conditioning