A self-organizing map (SOM) or self-organizing feature map (SOFM) is a type of artificial neural network (ANN) that is trained using unsupervised learning to produce a low-dimensional (typically two-dimensional), discretized representation of the input space of the training samples, called a map, and is therefore a method to do dimensionality reduction. Self-organizing maps differ from other artificial neural networks as they apply competitive learning as opposed to error-correction learning (such as backpropagation with gradient descent), and in the sense that they use a neighborhood function to preserve the topological properties of the input space.\n\nThis makes SOMs useful for visualization by creating low-dimensional views of high-dimensional data, akin to multidimensional scaling. The artificial neural network introduced by the Finnish professor Teuvo Kohonen in the 1980s is sometimes called a Kohonen map or network. The Kohonen net is a computationally convenient abstraction building on biological models of neural systems from the 1970s and morphogenesis models dating back to Alan Turing in the  1950s.While it is typical to consider this type of network structure as related to feedforward networks where the nodes are visualized as being attached, this type of architecture is fundamentally different in arrangement and motivation.\nUseful extensions include using toroidal grids where opposite edges are connected and using large numbers of nodes.\nIt is also common to use the U-Matrix. The U-Matrix value of a particular node is the average distance between the node's weight vector and that of its closest neighbors. In a square grid, for instance, the closest 4 or 8 nodes might be considered (the Von Neumann and Moore neighborhoods, respectively), or six nodes in a hexagonal grid.\nLarge SOMs display emergent properties. In maps consisting of thousands of nodes, it is possible to perform cluster operations on the map itself.\n\n\n== Structure and operations ==\nLike most artificial neural networks, SOMs operate in two modes: training and mapping. "Training" builds the map using input examples (a competitive process, also called vector quantization), while "mapping" automatically classifies a new input vector.\nThe visible part of a self-organizing map is the map space, which consists of components called nodes or neurons.  The map space is defined beforehand, usually as a finite two-dimensional region where nodes are arranged in a regular hexagonal or rectangular grid.  Each node is associated with a "weight" vector, which is a position in the input space; that is, it has the same dimension as each input vector.  While nodes in the map space stay fixed, training consists in moving weight vectors toward the input data (reducing a distance metric) without spoiling the topology induced from the map space.  Thus, the self-organizing map describes a mapping from a higher-dimensional input space to a lower-dimensional map space.  Once trained, the map can classify a vector from the input space by finding the node with the closest (smallest distance metric) weight vector to the input space vector.\n\n\n== Learning algorithm ==\nThe goal of learning in the self-organizing map is to cause different parts of the network to respond similarly to certain input patterns. This is partly motivated by how visual, auditory or other sensory information is handled in separate parts of the cerebral cortex in the human brain.\n\nThe weights of the neurons are initialized either to small random values or sampled evenly from the subspace spanned by the two largest principal component eigenvectors. With the latter alternative, learning is much faster because the initial weights already give a good approximation of SOM weights.The network must be fed a large number of example vectors that represent, as close as possible, the kinds of vectors expected during mapping. The examples are usually administered several times as iterations.\nThe training utilizes competitive learning. When a training example is fed to the network, its Euclidean distance to all weight vectors is computed. The neuron whose weight vector is most similar to the input is called the best matching unit (BMU). The weights of the BMU and neurons close to it in the SOM grid are adjusted towards the input vector. The magnitude of the change decreases with time and with the grid-distance from the BMU. The update formula for a neuron v with weight vector Wv(s) is\n\n  \n    \n      \n        \n          W\n          \n            v\n          \n        \n        (\n        s\n        +\n        1\n        )\n        =\n        \n          W\n          \n            v\n          \n        \n        (\n        s\n        )\n        +\n        \u03b8\n        (\n        u\n        ,\n        v\n        ,\n        s\n        )\n        \u22c5\n        \u03b1\n        (\n        s\n        )\n        \u22c5\n        (\n        D\n        (\n        t\n        )\n        \u2212\n        \n          W\n          \n            v\n          \n        \n        (\n        s\n        )\n        )\n      \n    \n    {\\displaystyle W_{v}(s+1)=W_{v}(s)+\\theta (u,v,s)\\cdot \\alpha (s)\\cdot (D(t)-W_{v}(s))}\n  ,where s is the step index, t an index into the training sample, u is the index of the BMU for the input vector D(t), \u03b1(s) is a monotonically decreasing learning coefficient; \u0398(u, v, s) is the neighborhood function which gives the distance between the neuron u and the neuron v in step s. Depending on the implementations, t can scan the training data set systematically (t is 0, 1, 2...T-1, then repeat, T being the training sample's size), be randomly drawn from the data set (bootstrap sampling), or implement some other sampling method (such as jackknifing).\nThe neighborhood function \u0398(u, v, s) (also called function of lateral interaction) depends on the grid-distance between the BMU (neuron u) and neuron v. In the simplest form, it is 1 for all neurons close enough to BMU and 0 for others, but the Gaussian and mexican-hat functions are common choices, too. Regardless of the functional form, the neighborhood function shrinks with time. At the beginning when the neighborhood is broad, the self-organizing takes place on the global scale. When the neighborhood has shrunk to just a couple of neurons, the weights are converging to local estimates. In some implementations, the learning coefficient \u03b1 and the neighborhood function \u0398 decrease steadily with increasing s, in others (in particular those where t scans the training data set) they decrease in step-wise fashion, once every T steps.\n\nThis process is repeated for each input vector for a (usually large) number of cycles \u03bb. The network winds up associating output nodes with groups or patterns in the input data set. If these patterns can be named, the names can be attached to the associated nodes in the trained net.\nDuring mapping, there will be one single winning neuron: the neuron whose weight vector lies closest to the input vector. This can be simply determined by calculating the Euclidean distance between input vector and weight vector.\nWhile representing input data as vectors has been emphasized in this article, any kind of object which can be represented digitally, which has an appropriate distance measure associated with it, and in which the necessary operations for training are possible can be used to construct a self-organizing map. This includes matrices, continuous functions or even other self-organizing maps.\n\n\n=== Variables ===\nThese are the variables needed, with vectors in bold,\n\n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n   is the current iteration\n\n  \n    \n      \n        \u03bb\n      \n    \n    {\\displaystyle \\lambda }\n   is the iteration limit\n\n  \n    \n      \n        t\n      \n    \n    {\\displaystyle t}\n   is the index of the target input data vector in the input data set \n  \n    \n      \n        \n          D\n        \n      \n    \n    {\\displaystyle \\mathbf {D} }\n  \n\n  \n    \n      \n        \n          D\n        \n        (\n        t\n        )\n      \n    \n    {\\displaystyle {D}(t)}\n   is a target input data vector\n\n  \n    \n      \n        v\n      \n    \n    {\\displaystyle v}\n   is the index of the node in the map\n\n  \n    \n      \n        \n          \n            W\n          \n          \n            v\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {W} _{v}}\n   is the current weight vector of node \n  \n    \n      \n        v\n      \n    \n    {\\displaystyle v}\n  \n\n  \n    \n      \n        u\n      \n    \n    {\\displaystyle u}\n   is the index of the best matching unit (BMU) in the map\n\n  \n    \n      \n        \u03b8\n        (\n        u\n        ,\n        v\n        ,\n        s\n        )\n      \n    \n    {\\displaystyle \\theta (u,v,s)}\n   is a restraint due to distance from BMU, usually called the neighbourhood function, and\n\n  \n    \n      \n        \u03b1\n        (\n        s\n        )\n      \n    \n    {\\displaystyle \\alpha (s)}\n   is a learning restraint due to iteration progress.\n\n\n=== Algorithm ===\nRandomize the  node weight vectors in a map\nRandomly pick an input vector \n  \n    \n      \n        \n          D\n        \n        (\n        t\n        )\n      \n    \n    {\\displaystyle {D}(t)}\n  \nTraverse each node in the map\nUse the Euclidean distance formula to find the similarity between the input vector and the map's node's weight vector\nTrack the node that produces the smallest distance (this node is the best matching unit, BMU)\nUpdate the weight vectors of the nodes in the neighborhood of the BMU (including the BMU itself) by pulling them closer to the input vector\n\n  \n    \n      \n        \n          W\n          \n            v\n          \n        \n        (\n        s\n        +\n        1\n        )\n        =\n        \n          W\n          \n            v\n          \n        \n        (\n        s\n        )\n        +\n        \u03b8\n        (\n        u\n        ,\n        v\n        ,\n        s\n        )\n        \u22c5\n        \u03b1\n        (\n        s\n        )\n        \u22c5\n        (\n        D\n        (\n        t\n        )\n        \u2212\n        \n          W\n          \n            v\n          \n        \n        (\n        s\n        )\n        )\n      \n    \n    {\\displaystyle W_{v}(s+1)=W_{v}(s)+\\theta (u,v,s)\\cdot \\alpha (s)\\cdot (D(t)-W_{v}(s))}\n  \nIncrease \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n   and repeat from step 2 while \n  \n    \n      \n        s\n        <\n        \u03bb\n      \n    \n    {\\displaystyle s<\\lambda }\n  A variant algorithm:\n\nRandomize the map's nodes' weight vectors\nTraverse each input vector in the input data set\nTraverse each node in the map\nUse the Euclidean distance formula to find the similarity between the input vector and the map's node's weight vector\nTrack the node that produces the smallest distance (this node is the best matching unit, BMU)\nUpdate the nodes in the neighborhood of the BMU (including the BMU itself) by pulling them closer to the input vector\n\n  \n    \n      \n        \n          W\n          \n            v\n          \n        \n        (\n        s\n        +\n        1\n        )\n        =\n        \n          W\n          \n            v\n          \n        \n        (\n        s\n        )\n        +\n        \u03b8\n        (\n        u\n        ,\n        v\n        ,\n        s\n        )\n        \u22c5\n        \u03b1\n        (\n        s\n        )\n        \u22c5\n        (\n        D\n        (\n        t\n        )\n        \u2212\n        \n          W\n          \n            v\n          \n        \n        (\n        s\n        )\n        )\n      \n    \n    {\\displaystyle W_{v}(s+1)=W_{v}(s)+\\theta (u,v,s)\\cdot \\alpha (s)\\cdot (D(t)-W_{v}(s))}\n  \nIncrease \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n   and repeat from step 2 while \n  \n    \n      \n        s\n        <\n        \u03bb\n      \n    \n    {\\displaystyle s<\\lambda }\n  \n\n\n=== SOM Initialization ===\nSelection of a good initial approximation is a well-known problem for all iterative methods of learning neural networks. Kohonen used random initiation of SOM weights. Recently, principal component initialization, in which initial map weights are chosen from the space of the first principal components, has become popular due to the exact reproducibility of the results.Careful comparison of the random initiation approach to principal component initialization for one-dimensional SOM (models of principal curves) demonstrated that the advantages of principal component SOM initialization are not universal. The best initialization method depends on the geometry of the specific dataset. Principal component initialization is preferable (in dimension one) if the principal curve approximating the dataset can be univalently and linearly projected on the first principal component (quasilinear sets). For nonlinear datasets, however, random initiation performs better.\n\n\n== Examples ==\n\n\n=== Fisher's Iris Flower Data ===\nConsider an n\xd7m array of nodes, each of which contains a weight vector and is aware of its location in the array. Each weight vector is of the same dimension as the node's input vector. The weights may initially be set to random values.\nNow we need input to feed the map.  Colors can be represented by their red, green, and blue components. Consequently, we will represent colors as vectors in the unit cube of the free vector space over \u211d generated by the basis:\n\nR = <255, 0, 0>\nG = <0, 255, 0>\nB = <0, 0, 255>\nThe diagram shown  compares the results of training on the data setsthreeColors = [255, 0, 0], [0, 255, 0], [0, 0, 255]\neightColors = [0, 0, 0], [255, 0, 0], [0, 255, 0], [0, 0, 255], [255, 255, 0], [0, 255, 255], [255, 0, 255], [255, 255, 255]and the original images.  Note the striking resemblance between the two.\n\nSimilarly, after training a 40\xd740 grid of neurons for 250 iterations with a learning rate of 0.1 on Fisher's Iris, the map can already detect the main differences between species.  \n\n\n== Interpretation ==\n\nThere are two ways to interpret a SOM. Because in the training phase weights of the whole neighborhood are moved in the same direction, similar items tend to excite adjacent neurons. Therefore, SOM forms a semantic map where similar samples are mapped close together and dissimilar ones apart. This may be visualized by a U-Matrix (Euclidean distance between weight vectors of neighboring cells) of the SOM.The other way is to think of neuronal weights as pointers to the input space. They form a discrete approximation of the distribution of training samples. More neurons point to regions with high training sample concentration and fewer where the samples are scarce.\nSOM may be considered a nonlinear generalization of Principal components analysis (PCA). It has been shown, using both artificial and real geophysical data, that SOM has many advantages over the conventional feature extraction methods such as Empirical Orthogonal Functions (EOF) or PCA.\nOriginally, SOM was not formulated as a solution to an optimisation problem. Nevertheless, there have been several attempts to modify the definition of SOM and to formulate an optimisation problem which gives similar results. For example, Elastic maps use the mechanical metaphor of elasticity to approximate principal manifolds: the analogy is an elastic membrane and plate.\n\n\n== Alternatives ==\nThe generative topographic map (GTM) is a potential alternative to SOMs. In the sense that a GTM explicitly requires a smooth and continuous mapping from the input space to the map space, it is topology preserving. However, in a practical sense, this measure of topological preservation is lacking.\nThe time adaptive self-organizing map (TASOM) network is an extension of the basic SOM. The TASOM employs adaptive learning rates and neighborhood functions. It also includes a scaling parameter to make the network invariant to scaling, translation and rotation of the input space. The TASOM and its variants have been used in several applications including adaptive clustering, multilevel thresholding, input space approximation, and active contour modeling. Moreover, a Binary Tree TASOM or BTASOM, resembling a binary natural tree having nodes composed of TASOM networks has been proposed where the number of its levels and the number of its nodes are adaptive with its environment.\nThe growing self-organizing map (GSOM) is a growing variant of the self-organizing map. The GSOM was developed to address the issue of identifying a suitable map size in the SOM. It starts with a minimal number of nodes (usually four) and grows new nodes on the boundary based on a heuristic. By using a value called the spread factor, the data analyst has the ability to control the growth of the GSOM.\nThe elastic maps approach borrows from the spline interpolation the idea of minimization of the elastic energy. In learning, it minimizes the sum of quadratic bending and stretching energy with the least squares approximation error.\nThe conformal approach  that uses conformal mapping to interpolate each training sample between grid nodes in a continuous surface. A one-to-one smooth mapping is possible in this approach.\nThe oriented and scalable map (OS-Map) generalises the neighborhood function and the winner selection. The homogeneous Gaussian neighborhood function is replaced with the matrix exponential. Thus one can specify the orientation either in the map space or in the data space. SOM has a fixed scale (=1), so that the maps "optimally describe the domain of observation". But what about a map covering the domain twice or in n-folds? This entails the conception of scaling. The OS-Map regards the scale as a statistical description of how many best-matching nodes an input has in the map.\n\n\n== Applications ==\nProject prioritization and selection \nSeismic facies analysis for oil and gas exploration \nFailure mode and effects analysis \nCreation of artwork \n\n\n== See also ==\nNeural gas\nLearning Vector Quantization\nLiquid state machine\nHybrid Kohonen SOM\nSparse coding\nSparse distributed memory\nDeep learning\nNeocognitron\nTopological data analysis\n\n\n== Notes ==\n\n\n== References ==