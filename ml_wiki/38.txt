Mean shift is a non-parametric feature-space analysis technique for locating the maxima of a density function, a so-called mode-seeking algorithm. Application domains include cluster analysis in computer vision and image processing.\n\n\n== History ==\nThe mean shift procedure was originally presented in 1975 by Fukunaga and Hostetler.\n\n\n== Overview ==\nMean shift is a procedure for locating the maxima\u2014the modes\u2014of a density function given discrete data sampled from that function. This is an iterative method, and we start with an initial estimate \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n  .  Let a kernel function \n  \n    \n      \n        K\n        (\n        \n          x\n          \n            i\n          \n        \n        \u2212\n        x\n        )\n      \n    \n    {\\displaystyle K(x_{i}-x)}\n   be given.  This function determines the weight of nearby points for re-estimation of the mean.  Typically a Gaussian kernel on the distance to the current estimate is used, \n  \n    \n      \n        K\n        (\n        \n          x\n          \n            i\n          \n        \n        \u2212\n        x\n        )\n        =\n        \n          e\n          \n            \u2212\n            c\n            \n              |\n            \n            \n              |\n            \n            \n              x\n              \n                i\n              \n            \n            \u2212\n            x\n            \n              |\n            \n            \n              \n                |\n              \n              \n                2\n              \n            \n          \n        \n      \n    \n    {\\displaystyle K(x_{i}-x)=e^{-c||x_{i}-x||^{2}}}\n  .  The weighted mean of the density in the window determined by \n  \n    \n      \n        K\n      \n    \n    {\\displaystyle K}\n   is\n\n  \n    \n      \n        m\n        (\n        x\n        )\n        =\n        \n          \n            \n              \n                \u2211\n                \n                  \n                    x\n                    \n                      i\n                    \n                  \n                  \u2208\n                  N\n                  (\n                  x\n                  )\n                \n              \n              K\n              (\n              \n                x\n                \n                  i\n                \n              \n              \u2212\n              x\n              )\n              \n                x\n                \n                  i\n                \n              \n            \n            \n              \n                \u2211\n                \n                  \n                    x\n                    \n                      i\n                    \n                  \n                  \u2208\n                  N\n                  (\n                  x\n                  )\n                \n              \n              K\n              (\n              \n                x\n                \n                  i\n                \n              \n              \u2212\n              x\n              )\n            \n          \n        \n      \n    \n    {\\displaystyle m(x)={\\frac {\\sum _{x_{i}\\in N(x)}K(x_{i}-x)x_{i}}{\\sum _{x_{i}\\in N(x)}K(x_{i}-x)}}}\n  where \n  \n    \n      \n        N\n        (\n        x\n        )\n      \n    \n    {\\displaystyle N(x)}\n   is the neighborhood of \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n  , a set of points for which \n  \n    \n      \n        K\n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        \u2260\n        0\n      \n    \n    {\\displaystyle K(x_{i})\\neq 0}\n  .\nThe difference \n  \n    \n      \n        m\n        (\n        x\n        )\n        \u2212\n        x\n      \n    \n    {\\displaystyle m(x)-x}\n   is called mean shift in Fukunaga and Hostetler. \nThe mean-shift algorithm now sets \n  \n    \n      \n        x\n        \u2190\n        m\n        (\n        x\n        )\n      \n    \n    {\\displaystyle x\\leftarrow m(x)}\n  , and repeats the estimation until \n  \n    \n      \n        m\n        (\n        x\n        )\n      \n    \n    {\\displaystyle m(x)}\n   converges.\nAlthough the mean shift algorithm has been widely used in many applications, a rigid proof for the convergence of the algorithm using a general kernel in a high dimensional space is still not known. Aliyari Ghassabeh showed the convergence of the mean shift algorithm in one-dimension with a differentiable, convex, and strictly decreasing profile function. However, the one-dimensional case has limited real world applications. Also, the convergence of the algorithm in higher dimensions with a finite number of the (or isolated) stationary points has been proved. However, sufficient conditions for a general kernel function to have finite (or isolated) stationary points have not been provided.\nGaussian Mean-Shift is an Expectation\u2013maximization algorithm.\n\n\n== Details ==\nLet data be a finite set \n  \n    \n      \n        S\n      \n    \n    {\\displaystyle S}\n   embedded in the \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n  -dimensional Euclidean space, \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n  . Let \n  \n    \n      \n        K\n      \n    \n    {\\displaystyle K}\n   be a flat kernel that is the characteristic function of the \n  \n    \n      \n        \u03bb\n      \n    \n    {\\displaystyle \\lambda }\n  -ball in \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n  ,\n\nIn each iteration of the algorithm, \n  \n    \n      \n        s\n        \u2190\n        m\n        (\n        s\n        )\n      \n    \n    {\\displaystyle s\\leftarrow m(s)}\n   is performed for all \n  \n    \n      \n        s\n        \u2208\n        S\n      \n    \n    {\\displaystyle s\\in S}\n   simultaneously. The first question, then, is how to estimate the density function given a sparse set of samples. One of the simplest approaches is to just smooth the data, e.g., by convolving it with a fixed kernel of width \n  \n    \n      \n        h\n      \n    \n    {\\displaystyle h}\n  ,\n\nwhere \n  \n    \n      \n        \n          x\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle x_{i}}\n   are the input samples and \n  \n    \n      \n        k\n        (\n        r\n        )\n      \n    \n    {\\displaystyle k(r)}\n   is the kernel function (or Parzen window). \n  \n    \n      \n        h\n      \n    \n    {\\displaystyle h}\n   is the only parameter in the algorithm and is called the bandwidth. This approach is known as kernel density estimation or the Parzen window technique. Once we have computed \n  \n    \n      \n        f\n        (\n        x\n        )\n      \n    \n    {\\displaystyle f(x)}\n   from equation above, we can find its local maxima using gradient ascent or some other optimization technique. The problem with this "brute force" approach is that, for higher dimensions, it becomes computationally prohibitive to evaluate \n  \n    \n      \n        f\n        (\n        x\n        )\n      \n    \n    {\\displaystyle f(x)}\n   over the complete search space. Instead, mean shift uses a variant of what is known in the optimization literature as multiple restart gradient descent. Starting at some guess for a local maximum, \n  \n    \n      \n        \n          y\n          \n            k\n          \n        \n      \n    \n    {\\displaystyle y_{k}}\n  , which can be a random input data point \n  \n    \n      \n        \n          x\n          \n            1\n          \n        \n      \n    \n    {\\displaystyle x_{1}}\n  , mean shift computes the gradient of the density estimate \n  \n    \n      \n        f\n        (\n        x\n        )\n      \n    \n    {\\displaystyle f(x)}\n   at \n  \n    \n      \n        \n          y\n          \n            k\n          \n        \n      \n    \n    {\\displaystyle y_{k}}\n   and takes an uphill step in that direction.\n\n\n== Types of kernels ==\nKernel definition: Let \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n   be the \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n  -dimensional Euclidean space, \n  \n    \n      \n        \n          \n            R\n          \n          \n            n\n          \n        \n      \n    \n    {\\displaystyle \\mathbb {R} ^{n}}\n  . The norm of \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n   is a non-negative number, \n  \n    \n      \n        \u2016\n        x\n        \n          \u2016\n          \n            2\n          \n        \n        =\n        \n          x\n          \n            \u22a4\n          \n        \n        x\n        \u2265\n        0\n      \n    \n    {\\displaystyle \\|x\\|^{2}=x^{\\top }x\\geq 0}\n  . A function \n  \n    \n      \n        K\n        :\n        X\n        \u2192\n        \n          R\n        \n      \n    \n    {\\displaystyle K:X\\rightarrow \\mathbb {R} }\n   is said to be a kernel if there exists a profile, \n  \n    \n      \n        k\n        :\n        [\n        0\n        ,\n        \u221e\n        [\n        \u2192\n        \n          R\n        \n      \n    \n    {\\displaystyle k:[0,\\infty [\\rightarrow \\mathbb {R} }\n   , such that\n\n  \n    \n      \n        K\n        (\n        x\n        )\n        =\n        k\n        (\n        \u2016\n        x\n        \n          \u2016\n          \n            2\n          \n        \n        )\n      \n    \n    {\\displaystyle K(x)=k(\\|x\\|^{2})}\n  \nand \n\nk is non-negative.\nk is non-increasing: \n  \n    \n      \n        k\n        (\n        a\n        )\n        \u2265\n        k\n        (\n        b\n        )\n      \n    \n    {\\displaystyle k(a)\\geq k(b)}\n   if \n  \n    \n      \n        a\n        <\n        b\n      \n    \n    {\\displaystyle a<b}\n  .\nk is piecewise continuous and \n  \n    \n      \n        \n          \u222b\n          \n            0\n          \n          \n            \u221e\n          \n        \n        k\n        (\n        r\n        )\n        \n        d\n        r\n        <\n        \u221e\n         \n      \n    \n    {\\displaystyle \\int _{0}^{\\infty }k(r)\\,dr<\\infty \\ }\n  The two most frequently used kernel profiles for mean shift are:\n\nFlat kernel\nGaussian kernel\nwhere the standard deviation parameter \n  \n    \n      \n        \u03c3\n      \n    \n    {\\displaystyle \\sigma }\n   works as the bandwidth parameter, \n  \n    \n      \n        h\n      \n    \n    {\\displaystyle h}\n  .\n\n\n== Applications ==\n\n\n=== Clustering ===\nConsider a set of points in two-dimensional space. Assume a circular window centered at C and having radius r as the kernel. Mean shift is a hill climbing algorithm which involves shifting this kernel iteratively to a higher density region until convergence. Every shift is defined by a mean shift vector. The mean shift vector always points toward the direction of the maximum increase in the density. At every iteration the kernel is shifted to the centroid or the mean of the points within it. The method of calculating this mean depends on the choice of the kernel. In this case if a Gaussian kernel is chosen instead of a flat kernel, then every point will first be assigned a weight which will decay exponentially as the distance from the kernel's center increases. At convergence, there will be no direction at which a shift can accommodate more points inside the kernel.\n\n\n=== Tracking ===\nThe mean shift algorithm can be used for visual tracking.  The simplest such algorithm would create a confidence map in the new image based on the color histogram of the object in the previous image, and use mean shift to find the peak of a confidence map near the object's old position. The confidence map is a probability density function on the new image, assigning each pixel of the new image a probability, which is the probability of the pixel color occurring in the object in the previous image. A few algorithms, such as kernel-based object tracking, \nensemble tracking, \nCAMshift  \nexpand on this idea.\n\n\n=== Smoothing ===\nLet \n  \n    \n      \n        \n          x\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle x_{i}}\n   and \n  \n    \n      \n        \n          z\n          \n            i\n          \n        \n        ,\n        i\n        =\n        1\n        ,\n        .\n        .\n        .\n        ,\n        n\n        ,\n      \n    \n    {\\displaystyle z_{i},i=1,...,n,}\n   be the \n  \n    \n      \n        d\n      \n    \n    {\\displaystyle d}\n  -dimensional input and filtered image pixels in the joint spatial-range domain. For each pixel,\n\nInitialize \n  \n    \n      \n        j\n        =\n        1\n      \n    \n    {\\displaystyle j=1}\n   and \n  \n    \n      \n        \n          y\n          \n            i\n            ,\n            1\n          \n        \n        =\n        \n          x\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle y_{i,1}=x_{i}}\n  \nCompute \n  \n    \n      \n        \n          y\n          \n            i\n            ,\n            j\n            +\n            1\n          \n        \n      \n    \n    {\\displaystyle y_{i,j+1}}\n   according to \n  \n    \n      \n        m\n        (\n        \u22c5\n        )\n      \n    \n    {\\displaystyle m(\\cdot )}\n   until convergence, \n  \n    \n      \n        y\n        =\n        \n          y\n          \n            i\n            ,\n            c\n          \n        \n      \n    \n    {\\displaystyle y=y_{i,c}}\n  .\nAssign \n  \n    \n      \n        \n          z\n          \n            i\n          \n        \n        =\n        (\n        \n          x\n          \n            i\n          \n          \n            s\n          \n        \n        ,\n        \n          y\n          \n            i\n            ,\n            c\n          \n          \n            r\n          \n        \n        )\n      \n    \n    {\\displaystyle z_{i}=(x_{i}^{s},y_{i,c}^{r})}\n  . The superscripts s and r denote the spatial and range components of a vector, respectively. The assignment specifies that the filtered data at the spatial location axis will have the range component of the point of convergence \n  \n    \n      \n        \n          y\n          \n            i\n            ,\n            c\n          \n          \n            r\n          \n        \n      \n    \n    {\\displaystyle y_{i,c}^{r}}\n  .\n\n\n== Strengths ==\nMean shift is an application-independent tool suitable for real data analysis.\nDoes not assume any predefined shape on data clusters.\nIt is capable of handling arbitrary feature spaces.\nThe procedure relies on choice of a single parameter: bandwidth.\nThe bandwidth/window size 'h' has a physical meaning, unlike k-means.\n\n\n== Weaknesses ==\nThe selection of a window size is not trivial.\nInappropriate window size can cause modes to be merged, or generate additional \u201cshallow\u201d modes.\nOften requires using adaptive window size.\n\n\n== Availability ==\nVariants of the algorithm can be found in machine learning and image processing packages:\n\nELKI. Java data mining tool with many clustering algorithms.\nImageJ. Image filtering using the mean shift filter.\nmlpack. Efficient dual-tree algorithm-based implementation.\nOpenCV contains mean-shift implementation via cvMeanShift Method\nOrfeo toolbox. A C++ implementation.\nScikit-learn Numpy/Python implementation uses ball tree for efficient neighboring points lookup\n\n\n== See also ==\nDBSCAN\nOPTICS algorithm\nKernel density estimation (KDE)\nKernel (statistics)\n\n\n== References ==