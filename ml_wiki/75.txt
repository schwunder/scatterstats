Empirical risk minimization (ERM) is a principle in statistical learning theory which defines a family of learning algorithms and is used to give theoretical bounds on their performance. The core idea is that we cannot know exactly how well an algorithm will work in practice (the true "risk") because we don't know the true distribution of data that the algorithm will work on, but we can instead measure its performance on a known set of training data (the "empirical" risk). \n\n\n== Background ==\nConsider the following situation, which is a general setting of many supervised learning problems. We have two spaces of objects \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n   and \n  \n    \n      \n        Y\n      \n    \n    {\\displaystyle Y}\n   and would like to learn a function \n  \n    \n      \n         \n        h\n        :\n        X\n        \u2192\n        Y\n      \n    \n    {\\displaystyle \\ h:X\\to Y}\n   (often called hypothesis) which outputs an object \n  \n    \n      \n        y\n        \u2208\n        Y\n      \n    \n    {\\displaystyle y\\in Y}\n  , given \n  \n    \n      \n        x\n        \u2208\n        X\n      \n    \n    {\\displaystyle x\\in X}\n  . To do so, we have at our disposal a training set of \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n   examples \n  \n    \n      \n         \n        (\n        \n          x\n          \n            1\n          \n        \n        ,\n        \n          y\n          \n            1\n          \n        \n        )\n        ,\n        \u2026\n        ,\n        (\n        \n          x\n          \n            n\n          \n        \n        ,\n        \n          y\n          \n            n\n          \n        \n        )\n      \n    \n    {\\displaystyle \\ (x_{1},y_{1}),\\ldots ,(x_{n},y_{n})}\n   where \n  \n    \n      \n        \n          x\n          \n            i\n          \n        \n        \u2208\n        X\n      \n    \n    {\\displaystyle x_{i}\\in X}\n   is an input and \n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n        \u2208\n        Y\n      \n    \n    {\\displaystyle y_{i}\\in Y}\n   is the corresponding response that we wish to get from \n  \n    \n      \n         \n        h\n        (\n        \n          x\n          \n            i\n          \n        \n        )\n      \n    \n    {\\displaystyle \\ h(x_{i})}\n  .\nTo put it more formally, we assume that there is a joint probability distribution \n  \n    \n      \n        P\n        (\n        x\n        ,\n        y\n        )\n      \n    \n    {\\displaystyle P(x,y)}\n   over \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n   and \n  \n    \n      \n        Y\n      \n    \n    {\\displaystyle Y}\n  , and that the training set consists of \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n   instances \n  \n    \n      \n         \n        (\n        \n          x\n          \n            1\n          \n        \n        ,\n        \n          y\n          \n            1\n          \n        \n        )\n        ,\n        \u2026\n        ,\n        (\n        \n          x\n          \n            n\n          \n        \n        ,\n        \n          y\n          \n            n\n          \n        \n        )\n      \n    \n    {\\displaystyle \\ (x_{1},y_{1}),\\ldots ,(x_{n},y_{n})}\n   drawn i.i.d. from \n  \n    \n      \n        P\n        (\n        x\n        ,\n        y\n        )\n      \n    \n    {\\displaystyle P(x,y)}\n  . Note that the assumption of a joint probability distribution allows us to model uncertainty in predictions (e.g. from noise in data) because \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n   is not a deterministic function of \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n  , but rather a random variable with conditional distribution \n  \n    \n      \n        P\n        (\n        y\n        \n          |\n        \n        x\n        )\n      \n    \n    {\\displaystyle P(y|x)}\n   for a fixed \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n  .\nWe also assume that we are given a non-negative real-valued loss function \n  \n    \n      \n        L\n        (\n        \n          \n            \n              y\n              ^\n            \n          \n        \n        ,\n        y\n        )\n      \n    \n    {\\displaystyle L({\\hat {y}},y)}\n   which measures how different the prediction \n  \n    \n      \n        \n          \n            \n              y\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\hat {y}}}\n   of a hypothesis is from the true outcome \n  \n    \n      \n        y\n        .\n      \n    \n    {\\displaystyle y.}\n   The risk associated with hypothesis \n  \n    \n      \n        h\n        (\n        x\n        )\n      \n    \n    {\\displaystyle h(x)}\n   is then defined as the expectation of the loss function:\n\n  \n    \n      \n        R\n        (\n        h\n        )\n        =\n        \n          E\n        \n        [\n        L\n        (\n        h\n        (\n        x\n        )\n        ,\n        y\n        )\n        ]\n        =\n        \u222b\n        L\n        (\n        h\n        (\n        x\n        )\n        ,\n        y\n        )\n        \n        d\n        P\n        (\n        x\n        ,\n        y\n        )\n        .\n      \n    \n    {\\displaystyle R(h)=\\mathbf {E} [L(h(x),y)]=\\int L(h(x),y)\\,dP(x,y).}\n  A loss function commonly used in theory is the 0-1 loss function: \n  \n    \n      \n        L\n        (\n        \n          \n            \n              y\n              ^\n            \n          \n        \n        ,\n        y\n        )\n        =\n        \n          \n            {\n            \n              \n                \n                  1\n                \n                \n                  \n                    \n                       If \n                    \n                  \n                  \n                  \n                    \n                      \n                        y\n                        ^\n                      \n                    \n                  \n                  \u2260\n                  y\n                \n              \n              \n                \n                  0\n                \n                \n                  \n                    \n                       If \n                    \n                  \n                  \n                  \n                    \n                      \n                        y\n                        ^\n                      \n                    \n                  \n                  =\n                  y\n                \n              \n            \n            \n          \n        \n      \n    \n    {\\displaystyle L({\\hat {y}},y)={\\begin{cases}1&{\\mbox{ If }}\\quad {\\hat {y}}\\neq y\\\\0&{\\mbox{ If }}\\quad {\\hat {y}}=y\\end{cases}}}\n  .\nThe ultimate goal of a learning algorithm is to find a hypothesis \n  \n    \n      \n        \n          h\n          \n            \u2217\n          \n        \n      \n    \n    {\\displaystyle h^{*}}\n   among a fixed class of functions \n  \n    \n      \n        \n          \n            H\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {H}}}\n   for which the risk \n  \n    \n      \n        R\n        (\n        h\n        )\n      \n    \n    {\\displaystyle R(h)}\n   is minimal:\n\n  \n    \n      \n        \n          h\n          \n            \u2217\n          \n        \n        =\n        arg\n        \u2061\n        \n          min\n          \n            h\n            \u2208\n            \n              \n                H\n              \n            \n          \n        \n        R\n        (\n        h\n        )\n        .\n      \n    \n    {\\displaystyle h^{*}=\\arg \\min _{h\\in {\\mathcal {H}}}R(h).}\n  \n\n\n== Empirical risk minimization ==\nIn general, the risk \n  \n    \n      \n        R\n        (\n        h\n        )\n      \n    \n    {\\displaystyle R(h)}\n   cannot be computed because the distribution \n  \n    \n      \n        P\n        (\n        x\n        ,\n        y\n        )\n      \n    \n    {\\displaystyle P(x,y)}\n   is unknown to the learning algorithm (this situation is referred to as agnostic learning). However, we can compute an approximation, called empirical risk, by averaging the loss function on the training set:\n\n  \n    \n      \n        \n        \n          R\n          \n            emp\n          \n        \n        (\n        h\n        )\n        =\n        \n          \n            1\n            n\n          \n        \n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            n\n          \n        \n        L\n        (\n        h\n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        ,\n        \n          y\n          \n            i\n          \n        \n        )\n        .\n      \n    \n    {\\displaystyle \\!R_{\\text{emp}}(h)={\\frac {1}{n}}\\sum _{i=1}^{n}L(h(x_{i}),y_{i}).}\n  The empirical risk minimization principle states that the learning algorithm should choose a hypothesis \n  \n    \n      \n        \n          \n            \n              h\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\hat {h}}}\n   which minimizes the empirical risk:\n\n  \n    \n      \n        \n          \n            \n              h\n              ^\n            \n          \n        \n        =\n        arg\n        \u2061\n        \n          min\n          \n            h\n            \u2208\n            \n              \n                H\n              \n            \n          \n        \n        \n          R\n          \n            emp\n          \n        \n        (\n        h\n        )\n        .\n      \n    \n    {\\displaystyle {\\hat {h}}=\\arg \\min _{h\\in {\\mathcal {H}}}R_{\\text{emp}}(h).}\n  Thus the learning algorithm defined by the ERM principle consists in solving the above optimization problem.\n\n\n== Properties ==\n\n\n=== Computational complexity ===\nEmpirical risk minimization for a classification problem with a 0-1 loss function is known to be an NP-hard problem even for such a relatively simple class of functions as linear classifiers. Though, it can be solved efficiently when the minimal empirical risk is zero, i.e. data is linearly separable.\nIn practice, machine learning algorithms cope with that either by employing a convex approximation to the 0-1 loss function (like hinge loss for SVM), which is easier to optimize, or by imposing assumptions on the distribution \n  \n    \n      \n        P\n        (\n        x\n        ,\n        y\n        )\n      \n    \n    {\\displaystyle P(x,y)}\n   (and thus stop being agnostic learning algorithms to which the above result applies).\n\n\n== See also ==\nMaximum likelihood estimation\nM-estimator\n\n\n== References ==\n\n\n== Further reading ==\nVapnik, V. (2000). The Nature of Statistical Learning Theory. Information Science and Statistics. Springer-Verlag. ISBN 978-0-387-98780-4.