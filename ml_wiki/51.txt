Conditional random fields (CRFs) are a class of statistical modeling method often applied in pattern recognition and machine learning and used for structured prediction. Whereas a classifier predicts a label for a single sample without considering "neighboring" samples, a CRF can take context into account. To do so, the prediction is modeled as a graphical model, which implements dependencies between the predictions. What kind of graph is used depends on the application. For example, in natural language processing, linear chain CRFs are popular, which implement sequential dependencies in the predictions. In image processing the graph typically connects locations to nearby and/or similar locations to enforce that they receive similar predictions.\nOther examples where CRFs are used are: labeling or parsing of sequential data for natural language processing or biological sequences, POS tagging, shallow parsing, named entity recognition, gene finding, peptide critical functional region finding, and object recognition and image segmentation in computer vision.\n\n\n== Description ==\nCRFs are a type of discriminative undirected probabilistic graphical model.\nLafferty, McCallum and Pereira define a CRF on observations \n  \n    \n      \n        \n          X\n        \n      \n    \n    {\\displaystyle {\\boldsymbol {X}}}\n   and random variables \n  \n    \n      \n        \n          Y\n        \n      \n    \n    {\\displaystyle {\\boldsymbol {Y}}}\n   as follows:\n\nLet \n  \n    \n      \n        G\n        =\n        (\n        V\n        ,\n        E\n        )\n      \n    \n    {\\displaystyle G=(V,E)}\n   be a graph such that\n\n  \n    \n      \n        \n          Y\n        \n        =\n        (\n        \n          \n            Y\n          \n          \n            v\n          \n        \n        \n          )\n          \n            v\n            \u2208\n            V\n          \n        \n      \n    \n    {\\displaystyle {\\boldsymbol {Y}}=({\\boldsymbol {Y}}_{v})_{v\\in V}}\n  ,\n so that \n  \n    \n      \n        \n          Y\n        \n      \n    \n    {\\displaystyle {\\boldsymbol {Y}}}\n   is indexed by the vertices of \n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  . \nThen \n  \n    \n      \n        (\n        \n          X\n        \n        ,\n        \n          Y\n        \n        )\n      \n    \n    {\\displaystyle ({\\boldsymbol {X}},{\\boldsymbol {Y}})}\n   is a conditional random field when the random variables \n  \n    \n      \n        \n          \n            Y\n          \n          \n            v\n          \n        \n      \n    \n    {\\displaystyle {\\boldsymbol {Y}}_{v}}\n  , conditioned on \n  \n    \n      \n        \n          X\n        \n      \n    \n    {\\displaystyle {\\boldsymbol {X}}}\n  , obey the Markov property with\nrespect to the graph: \n  \n    \n      \n        p\n        (\n        \n          \n            Y\n          \n          \n            v\n          \n        \n        \n          |\n        \n        \n          X\n        \n        ,\n        \n          \n            Y\n          \n          \n            w\n          \n        \n        ,\n        w\n        \u2260\n        v\n        )\n        =\n        p\n        (\n        \n          \n            Y\n          \n          \n            v\n          \n        \n        \n          |\n        \n        \n          X\n        \n        ,\n        \n          \n            Y\n          \n          \n            w\n          \n        \n        ,\n        w\n        \u223c\n        v\n        )\n      \n    \n    {\\displaystyle p({\\boldsymbol {Y}}_{v}|{\\boldsymbol {X}},{\\boldsymbol {Y}}_{w},w\\neq v)=p({\\boldsymbol {Y}}_{v}|{\\boldsymbol {X}},{\\boldsymbol {Y}}_{w},w\\sim v)}\n  , where \n  \n    \n      \n        \n          \n            w\n          \n        \n        \u223c\n        v\n      \n    \n    {\\displaystyle {\\mathit {w}}\\sim v}\n   means\nthat \n  \n    \n      \n        w\n      \n    \n    {\\displaystyle w}\n   and \n  \n    \n      \n        v\n      \n    \n    {\\displaystyle v}\n   are neighbors in \n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  .\n\nWhat this means is that a CRF is an undirected graphical model whose nodes can be divided into exactly two disjoint sets \n  \n    \n      \n        \n          X\n        \n      \n    \n    {\\displaystyle {\\boldsymbol {X}}}\n   and \n  \n    \n      \n        \n          Y\n        \n      \n    \n    {\\displaystyle {\\boldsymbol {Y}}}\n  , the observed and output variables, respectively; the conditional distribution \n  \n    \n      \n        p\n        (\n        \n          Y\n        \n        \n          |\n        \n        \n          X\n        \n        )\n      \n    \n    {\\displaystyle p({\\boldsymbol {Y}}|{\\boldsymbol {X}})}\n   is then modeled.\n\n\n=== Inference ===\nFor general graphs, the problem of exact inference in CRFs is intractable. The inference problem for a CRF is basically the same as for an MRF and the same arguments hold.\nHowever, there exist special cases for which exact inference is feasible:\n\nIf the graph is a chain or a tree, message passing algorithms yield exact solutions. The algorithms used in these cases are analogous to the forward-backward and Viterbi algorithm for the case of HMMs.\nIf the CRF only contains pair-wise potentials and the energy is submodular, combinatorial min cut/max flow algorithms yield exact solutions.If exact inference is impossible, several algorithms can be used to obtain approximate solutions. These include:\n\nLoopy belief propagation\nAlpha expansion\nMean field inference\nLinear programming relaxations\n\n\n=== Parameter Learning ===\nLearning the parameters \n  \n    \n      \n        \u03b8\n      \n    \n    {\\displaystyle \\theta }\n   is usually done by maximum likelihood learning for \n  \n    \n      \n        p\n        (\n        \n          Y\n          \n            i\n          \n        \n        \n          |\n        \n        \n          X\n          \n            i\n          \n        \n        ;\n        \u03b8\n        )\n      \n    \n    {\\displaystyle p(Y_{i}|X_{i};\\theta )}\n  . If all nodes have exponential family distributions and all nodes are observed during training, this optimization is convex. It can be solved for example using gradient descent algorithms, or Quasi-Newton methods such as the L-BFGS algorithm. On the other hand, if some variables are unobserved, the inference problem has to be solved for these variables. Exact inference is intractable in general graphs, so approximations have to be used.\n\n\n=== Examples ===\nIn sequence modeling, the graph of interest is usually a chain graph. An input sequence of observed variables \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n   represents a sequence of observations and \n  \n    \n      \n        Y\n      \n    \n    {\\displaystyle Y}\n   represents a hidden (or unknown) state variable that needs to be inferred given the observations. The \n  \n    \n      \n        \n          Y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle Y_{i}}\n   are structured to form a chain, with an edge between each \n  \n    \n      \n        \n          Y\n          \n            i\n            \u2212\n            1\n          \n        \n      \n    \n    {\\displaystyle Y_{i-1}}\n   and \n  \n    \n      \n        \n          Y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle Y_{i}}\n  . As well as having a simple interpretation of the \n  \n    \n      \n        \n          Y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle Y_{i}}\n   as "labels" for each element in the input sequence, this layout admits efficient algorithms for:\n\nmodel training, learning the conditional distributions between the \n  \n    \n      \n        \n          Y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle Y_{i}}\n   and feature functions from some corpus of training data.\ndecoding, determining the probability of a given label sequence \n  \n    \n      \n        Y\n      \n    \n    {\\displaystyle Y}\n   given \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n  .\ninference, determining the most likely label sequence \n  \n    \n      \n        Y\n      \n    \n    {\\displaystyle Y}\n   given \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n  .The conditional dependency of each \n  \n    \n      \n        \n          Y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle Y_{i}}\n   on \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n   is defined through a fixed set of feature functions of the form \n  \n    \n      \n        f\n        (\n        i\n        ,\n        \n          Y\n          \n            i\n            \u2212\n            1\n          \n        \n        ,\n        \n          Y\n          \n            i\n          \n        \n        ,\n        X\n        )\n      \n    \n    {\\displaystyle f(i,Y_{i-1},Y_{i},X)}\n  , which can be thought of as measurements on the input sequence that partially determine the likelihood of each possible value for \n  \n    \n      \n        \n          Y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle Y_{i}}\n  . The model assigns each feature a numerical weight and combines them to determine the probability of a certain value for \n  \n    \n      \n        \n          Y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle Y_{i}}\n  .\nLinear-chain CRFs have many of the same applications as conceptually simpler hidden Markov models (HMMs), but relax certain assumptions about the input and output sequence distributions. An HMM can loosely be understood as a CRF with very specific feature functions that use constant probabilities to model state transitions and emissions. Conversely, a CRF can loosely be understood as a generalization of an HMM that makes the constant transition probabilities into arbitrary functions that vary across the positions in the sequence of hidden states, depending on the input sequence.\nNotably, in contrast to HMMs, CRFs can contain any number of feature functions, the feature functions can inspect the entire input sequence \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n   at any point during inference, and the range of the feature functions need not have a probabilistic interpretation.\n\n\n== Variants ==\n\n\n=== Higher-order CRFs and semi-Markov CRFs ===\nCRFs can be extended into higher order models by making each \n  \n    \n      \n        \n          Y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle Y_{i}}\n   dependent on a fixed number \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n   of previous variables \n  \n    \n      \n        \n          Y\n          \n            i\n            \u2212\n            k\n          \n        \n        ,\n        .\n        .\n        .\n        ,\n        \n          Y\n          \n            i\n            \u2212\n            1\n          \n        \n      \n    \n    {\\displaystyle Y_{i-k},...,Y_{i-1}}\n  . In conventional formulations of higher order CRFs, training and inference are only practical for small values of \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n   (such as k \u2264 5), since their computational cost increases exponentially with \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n  .\nHowever, another recent advance has managed to ameliorate these issues by leveraging concepts and tools from the field of Bayesian nonparametrics. Specifically, the CRF-infinity approach constitutes a CRF-type model that is capable of learning infinitely-long temporal dynamics in a scalable fashion. This is effected by introducing a novel potential function for CRFs that is based on the Sequence Memoizer (SM), a nonparametric Bayesian model for learning infinitely-long dynamics in sequential observations. To render such a model computationally tractable, CRF-infinity employs a mean-field approximation of the postulated novel potential functions (which are driven by an SM). This allows for devising efficient approximate training and inference algorithms for the model, without undermining its capability to capture and model temporal dependencies of arbitrary length.\nThere exists another generalization of CRFs, the semi-Markov conditional random field (semi-CRF), which models variable-length segmentations of the label sequence \n  \n    \n      \n        Y\n      \n    \n    {\\displaystyle Y}\n  . This provides much of the power of higher-order CRFs to model long-range dependencies of the \n  \n    \n      \n        \n          Y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle Y_{i}}\n  , at a reasonable computational cost.\nFinally, large-margin models for structured prediction, such as the structured Support Vector Machine can be seen as an alternative training procedure to CRFs.\n\n\n=== Latent-dynamic conditional random field ===\nLatent-dynamic conditional random fields (LDCRF) or discriminative probabilistic latent variable models (DPLVM) are a type of CRFs for sequence tagging tasks. They are latent variable models that are trained discriminatively.\nIn an LDCRF, like in any sequence tagging task, given a sequence of observations x = \n  \n    \n      \n        \n          x\n          \n            1\n          \n        \n        ,\n        \u2026\n        ,\n        \n          x\n          \n            n\n          \n        \n      \n    \n    {\\displaystyle x_{1},\\dots ,x_{n}}\n  , the main problem the model must solve is how to assign a sequence of labels y = \n  \n    \n      \n        \n          y\n          \n            1\n          \n        \n        ,\n        \u2026\n        ,\n        \n          y\n          \n            n\n          \n        \n      \n    \n    {\\displaystyle y_{1},\\dots ,y_{n}}\n   from one finite set of labels Y. Instead of directly modeling P(y|x) as an ordinary linear-chain CRF would do, a set of latent variables h is "inserted" between x and y using the chain rule of probability:\n\n  \n    \n      \n        P\n        (\n        \n          y\n        \n        \n          |\n        \n        \n          x\n        \n        )\n        =\n        \n          \u2211\n          \n            \n              h\n            \n          \n        \n        P\n        (\n        \n          y\n        \n        \n          |\n        \n        \n          h\n        \n        ,\n        \n          x\n        \n        )\n        P\n        (\n        \n          h\n        \n        \n          |\n        \n        \n          x\n        \n        )\n      \n    \n    {\\displaystyle P(\\mathbf {y} |\\mathbf {x} )=\\sum _{\\mathbf {h} }P(\\mathbf {y} |\\mathbf {h} ,\\mathbf {x} )P(\\mathbf {h} |\\mathbf {x} )}\n  This allows capturing latent structure between the observations and labels. While LDCRFs can be trained using quasi-Newton methods, a specialized version of the perceptron algorithm called the latent-variable perceptron has been developed for them as well, based on Collins' structured perceptron algorithm. These models find applications in computer vision, specifically gesture recognition from video streams and shallow parsing.\n\n\n== Software ==\nThis is a partial list of software that implement generic CRF tools.\n\nRNNSharp CRFs based on recurrent neural networks (C#, .NET)\nCRF-ADF Linear-chain CRFs with fast online ADF training (C#, .NET)\nCRFSharp Linear-chain CRFs (C#, .NET)\nGCO CRFs with submodular energy functions (C++, Matlab)\nDGM General CRFs (C++)\nGRMM General CRFs (Java)\nfactorie General CRFs (Scala)\nCRFall General CRFs (Matlab)\nSarawagi's CRF Linear-chain CRFs (Java)\nHCRF library Hidden-state CRFs (C++, Matlab)\nAccord.NET Linear-chain CRF, HCRF and HMMs (C#, .NET)\nWapiti Fast linear-chain CRFs (C)\nCRFSuite Fast restricted linear-chain CRFs (C)\nCRF++ Linear-chain CRFs (C++)\nFlexCRFs First-order and second-order Markov CRFs (C++)\ncrf-chain1 First-order, linear-chain CRFs (Haskell)\nimageCRF CRF for segmenting images and image volumes (C++)\nMALLET Linear-chain for sequence tagging (Java)\nPyStruct Structured Learning in Python (Python)\nPycrfsuite A python binding for crfsuite (Python)\nFigaro Probabilistic programming language capable of defining CRFs and other graphical models (Scala)\nCRF Modeling and computational tools for CRFs and other undirected graphical models (R)\nOpenGM Library for discrete factor graph models and distributive operations on these models (C++)\nUPGMpp Library for building, training, and performing inference with Undirected Graphical Models (C++)\nKEG_CRF Fast Linear CRFs (C++)This is a partial list of software that implement CRF related tools.\n\nMedaCy Medical Named Entity Recognizer (Python)\nConrad CRF based gene predictor (Java)\nStanford NER Named Entity Recognizer (Java)\nBANNER Named Entity Recognizer (Java)\n\n\n== See also ==\nHammersley\u2013Clifford theorem\nGraphical model\nMarkov random field\nMaximum entropy Markov model (MEMM)\n\n\n== References ==\n\n\n== Further reading ==\nMcCallum, A.: Efficiently inducing features of conditional random fields. In: Proc. 19th Conference on Uncertainty in Artificial Intelligence. (2003)\nWallach, H.M.: Conditional random fields: An introduction. Technical report MS-CIS-04-21, University of Pennsylvania (2004)\nSutton, C., McCallum, A.: An Introduction to Conditional Random Fields for Relational Learning. In "Introduction to Statistical Relational Learning". Edited by Lise Getoor and Ben Taskar. MIT Press. (2006) Online PDF\nKlinger, R., Tomanek, K.: Classical Probabilistic Models and Conditional Random Fields. Algorithm Engineering Report TR07-2-013, Department of Computer Science, Dortmund University of Technology, December 2007. ISSN 1864-4503. Online PDF