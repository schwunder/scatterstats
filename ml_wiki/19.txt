Decision tree learning is one of the predictive modelling approaches used in statistics, data mining and machine learning. It uses a decision tree (as a predictive model) to go from observations about an item (represented in the branches) to conclusions about the item's target value (represented in the leaves). Tree models where the target variable can take a discrete set of values are called classification trees; in these tree structures, leaves represent class labels and branches represent conjunctions of features that lead to those class labels. Decision trees where the target variable can take continuous values (typically real numbers) are called regression trees. Decision trees are among the most popular machine learning algorithms given their intelligibility and simplicity.In decision analysis, a decision tree can be used to visually and explicitly represent decisions and decision making. In data mining, a decision tree describes data (but the resulting classification tree can be an input for decision making). This page deals with decision trees in data mining.\n\n\n== General ==\n\nDecision tree learning is a method commonly used in data mining. The goal is to create a model that predicts the value of a target variable based on several input variables.\nA decision tree is a simple representation for classifying examples. For this section, assume that all of the input features have finite discrete domains, and there is a single target feature called the "classification". Each element of the domain of the classification is called a class.\nA decision tree or a classification tree is a tree in which each internal (non-leaf) node is labeled with an input feature. The arcs coming from a node labeled with an input feature are labeled with each of the possible values of the target feature or the arc leads to a subordinate decision node on a different input feature. Each leaf of the tree is labeled with a class or a probability distribution over the classes, signifying that the data set has been classified by the tree into either a specific class, or into a particular probability distribution (which, if the decision tree is well-constructed, is skewed towards certain subsets of classes).\nA tree is built by splitting the source set, constituting the root node of the tree, into subsets\u2014which constitute the successor children. The splitting is based on a set of splitting rules based on classification features.  This process is repeated on each derived subset in a recursive manner called recursive partitioning.\nThe recursion is completed when the subset at a node has all the same values of the target variable, or when splitting no longer adds value to the predictions. This process of top-down induction of decision trees (TDIDT) is an example of a greedy algorithm, and it is by far the most common strategy for learning decision trees from data.In data mining, decision trees can be described also as the combination of mathematical and computational techniques to aid the description, categorization and generalization of a given set of data.\nData comes in records of the form:\n\n  \n    \n      \n        (\n        \n          \n            x\n          \n        \n        ,\n        Y\n        )\n        =\n        (\n        \n          x\n          \n            1\n          \n        \n        ,\n        \n          x\n          \n            2\n          \n        \n        ,\n        \n          x\n          \n            3\n          \n        \n        ,\n        .\n        .\n        .\n        ,\n        \n          x\n          \n            k\n          \n        \n        ,\n        Y\n        )\n      \n    \n    {\\displaystyle ({\\textbf {x}},Y)=(x_{1},x_{2},x_{3},...,x_{k},Y)}\n  The dependent variable, \n  \n    \n      \n        Y\n      \n    \n    {\\displaystyle Y}\n  , is the target variable that we are trying to understand, classify or generalize. The vector \n  \n    \n      \n        \n          \n            x\n          \n        \n      \n    \n    {\\displaystyle {\\textbf {x}}}\n   is composed of the features, \n  \n    \n      \n        \n          x\n          \n            1\n          \n        \n        ,\n        \n          x\n          \n            2\n          \n        \n        ,\n        \n          x\n          \n            3\n          \n        \n      \n    \n    {\\displaystyle x_{1},x_{2},x_{3}}\n   etc., that are used for that task.\n\n\n== Decision tree types ==\nDecision trees used in data mining are of two main types:\n\nClassification tree analysis is when the predicted outcome is the class (discrete) to which the data belongs.\nRegression tree analysis is when the predicted outcome can be considered a real number (e.g. the price of a house, or a patient's length of stay in a hospital).The term Classification And Regression Tree (CART) analysis is an umbrella term used to refer to both of the above procedures, first introduced by Breiman et al. in 1984. Trees used for regression and trees used for classification have some similarities - but also some differences, such as the procedure used to determine where to split.\nDecision stream avoids the problems of data exhaustion and formation of unrepresentative data samples in decision tree nodes by merging the leaves from the same and/or different levels of predictive model structure. With increasing the number of samples in nodes and reducing the tree width, decision stream preserves statistically representative data and allows extremely deep graph architecture that can consist of hundreds of levels.Some techniques, often called ensemble methods, construct more than one decision tree:\n\nBoosted trees Incrementally building an ensemble by training each new instance to emphasize the training instances previously mis-modeled. A typical example is AdaBoost. These can be used for regression-type and classification-type problems.\nBootstrap aggregated (or bagged) decision trees, an early ensemble method, builds multiple decision trees by repeatedly resampling training data with replacement, and voting the trees for a consensus prediction.A random forest classifier is a specific type of bootstrap aggregating\nRotation forest \u2013 in which every decision tree is trained by first applying principal component analysis (PCA) on a random subset of the input features.A special case of a decision tree is a decision list, which is a one-sided decision tree, so that every internal node has exactly 1 leaf node and exactly 1 internal node as a child (except for the bottommost node, whose only child is a single leaf node).  While less expressive, decision lists are arguably easier to understand than general decision trees due to their added sparsity, permit non-greedy learning methods and monotonic constraints to be imposed.Notable decision tree algorithms include:\n\nID3 (Iterative Dichotomiser 3)\nC4.5 (successor of ID3)\nCART (Classification And Regression Tree)\nChi-square automatic interaction detection (CHAID). Performs multi-level splits when computing classification trees.\nMARS: extends decision trees to handle numerical data better.\nConditional Inference Trees. Statistics-based approach that uses non-parametric tests as splitting criteria, corrected for multiple testing to avoid overfitting. This approach results in unbiased predictor selection and does not require pruning.ID3 and CART were invented independently at around the same time (between 1970 and 1980), yet follow a similar approach for learning a decision tree from training tuples.\nIt has also been proposed to leverage concepts of fuzzy set theory for the definition of a special version of decision tree, known as Fuzzy Decision Tree (FDT). \nIn this type of fuzzy classification, generally an input vector \n  \n    \n      \n        \n          \n            x\n          \n        \n      \n    \n    {\\displaystyle {\\textbf {x}}}\n   is associated with multiple classes, each with a different confidence value.\nBoosted ensembles of FDTs have been recently investigated as well, and they have shown performances comparable to those of other very efficient fuzzy classifiers.\n\n\n== Metrics ==\nAlgorithms for constructing decision trees usually work top-down, by choosing a variable at each step that best splits the set of items. Different algorithms use different metrics for measuring "best".  These generally measure the homogeneity of the target variable within the subsets. Some examples are given below. These metrics are applied to each candidate subset, and the resulting values are combined (e.g., averaged) to provide a measure of the quality of the split.\n\n\n=== Gini impurity ===\n\nUsed by the CART (classification and regression tree) algorithm for classification trees, Gini impurity is a measure of how often a randomly chosen element from the set would be incorrectly labeled if it was randomly labeled according to the distribution of labels in the subset. The Gini impurity can be computed by summing the probability \n  \n    \n      \n        \n          p\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle p_{i}}\n   of an item with label \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n    being chosen times the probability \n  \n    \n      \n        \n          \u2211\n          \n            k\n            \u2260\n            i\n          \n        \n        \n          p\n          \n            k\n          \n        \n        =\n        1\n        \u2212\n        \n          p\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\sum _{k\\neq i}p_{k}=1-p_{i}}\n   of a mistake in categorizing that item.  It reaches its minimum (zero) when all cases in the node fall into a single target category.\nThe Gini impurity is also an information theoretic measure and corresponds to Tsallis Entropy with deformation coefficient \n  \n    \n      \n        q\n        =\n        2\n      \n    \n    {\\displaystyle q=2}\n  , which in Physics is associated with the lack of information in out-of-equlibrium, non-extensive, dissipative and quantum systems. For the limit \n  \n    \n      \n        q\n        \u2192\n        1\n      \n    \n    {\\displaystyle q\\to 1}\n   one recovers the usual Boltzmann-Gibbs or Shannon entropy. In this sense, the Gini impurity is but a variation of the usual entropy measure for decision trees.\nTo compute Gini impurity for a set of items with \n  \n    \n      \n        J\n      \n    \n    {\\displaystyle J}\n   classes, suppose \n  \n    \n      \n        i\n        \u2208\n        {\n        1\n        ,\n        2\n        ,\n        .\n        .\n        .\n        ,\n        J\n        }\n      \n    \n    {\\displaystyle i\\in \\{1,2,...,J\\}}\n  , and let \n  \n    \n      \n        \n          p\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle p_{i}}\n   be the fraction of items labeled with class \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n   in the set.\n\n  \n    \n      \n        \n          I\n          \n            G\n          \n        \n        \u2061\n        (\n        p\n        )\n        =\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            J\n          \n        \n        \n          (\n          \n            \n              p\n              \n                i\n              \n            \n            \n              \u2211\n              \n                k\n                \u2260\n                i\n              \n            \n            \n              p\n              \n                k\n              \n            \n          \n          )\n        \n        =\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            J\n          \n        \n        \n          p\n          \n            i\n          \n        \n        (\n        1\n        \u2212\n        \n          p\n          \n            i\n          \n        \n        )\n        =\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            J\n          \n        \n        (\n        \n          p\n          \n            i\n          \n        \n        \u2212\n        \n          \n            \n              p\n              \n                i\n              \n            \n          \n          \n            2\n          \n        \n        )\n        =\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            J\n          \n        \n        \n          p\n          \n            i\n          \n        \n        \u2212\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            J\n          \n        \n        \n          \n            \n              p\n              \n                i\n              \n            \n          \n          \n            2\n          \n        \n        =\n        1\n        \u2212\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            J\n          \n        \n        \n          \n            \n              p\n              \n                i\n              \n            \n          \n          \n            2\n          \n        \n      \n    \n    {\\displaystyle \\operatorname {I} _{G}(p)=\\sum _{i=1}^{J}\\left(p_{i}\\sum _{k\\neq i}p_{k}\\right)=\\sum _{i=1}^{J}p_{i}(1-p_{i})=\\sum _{i=1}^{J}(p_{i}-{p_{i}}^{2})=\\sum _{i=1}^{J}p_{i}-\\sum _{i=1}^{J}{p_{i}}^{2}=1-\\sum _{i=1}^{J}{p_{i}}^{2}}\n  \n\n\n=== Information gain ===\n\nUsed by the ID3, C4.5 and C5.0 tree-generation algorithms. Information gain is based on the concept of entropy and information content from information theory.\nEntropy is defined as below\n\n  \n    \n      \n        \n          H\n        \n        (\n        T\n        )\n        =\n        \n          I\n          \n            E\n          \n        \n        \u2061\n        \n          (\n          \n            \n              p\n              \n                1\n              \n            \n            ,\n            \n              p\n              \n                2\n              \n            \n            ,\n            .\n            .\n            .\n            ,\n            \n              p\n              \n                J\n              \n            \n          \n          )\n        \n        =\n        \u2212\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            J\n          \n        \n        \n          \n            p\n            \n              i\n            \n          \n          \n            log\n            \n              2\n            \n          \n          \u2061\n          \n            p\n            \n              i\n            \n          \n        \n      \n    \n    {\\displaystyle \\mathrm {H} (T)=\\operatorname {I} _{E}\\left(p_{1},p_{2},...,p_{J}\\right)=-\\sum _{i=1}^{J}{p_{i}\\log _{2}p_{i}}}\n  where \n  \n    \n      \n        \n          p\n          \n            1\n          \n        \n        ,\n        \n          p\n          \n            2\n          \n        \n        ,\n        .\n        .\n        .\n      \n    \n    {\\displaystyle p_{1},p_{2},...}\n  are fractions that add up to 1 and represent the percentage of each class present in the child node that results from a split in the tree.\n\n  \n    \n      \n        =\n        \u2212\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            J\n          \n        \n        \n          p\n          \n            i\n          \n        \n        \n          log\n          \n            2\n          \n        \n        \u2061\n        \n          \n            p\n            \n              i\n            \n          \n        \n        \u2212\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            J\n          \n        \n        \u2212\n        Pr\n        (\n        i\n        \n          |\n        \n        a\n        )\n        \n          log\n          \n            2\n          \n        \n        \u2061\n        \n          Pr\n          (\n          i\n          \n            |\n          \n          a\n          )\n        \n      \n    \n    {\\displaystyle =-\\sum _{i=1}^{J}p_{i}\\log _{2}{p_{i}}-\\sum _{i=1}^{J}-\\Pr(i|a)\\log _{2}{\\Pr(i|a)}}\n  Averaging over the possible values of \n  \n    \n      \n        A\n      \n    \n    {\\displaystyle A}\n  ,\n\n  \n    \n      \n        =\n        \u2212\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            J\n          \n        \n        \n          p\n          \n            i\n          \n        \n        \n          log\n          \n            2\n          \n        \n        \u2061\n        \n          \n            p\n            \n              i\n            \n          \n        \n        \u2212\n        \n          \u2211\n          \n            a\n          \n        \n        \n          p\n          (\n          a\n          )\n          \n            \u2211\n            \n              i\n              =\n              1\n            \n            \n              J\n            \n          \n          \u2212\n          Pr\n          (\n          i\n          \n            |\n          \n          a\n          )\n          \n            log\n            \n              2\n            \n          \n          \u2061\n          \n            Pr\n            (\n            i\n            \n              |\n            \n            a\n            )\n          \n        \n      \n    \n    {\\displaystyle =-\\sum _{i=1}^{J}p_{i}\\log _{2}{p_{i}}-\\sum _{a}{p(a)\\sum _{i=1}^{J}-\\Pr(i|a)\\log _{2}{\\Pr(i|a)}}}\n  That is, the expected information gain is the mutual information, meaning that on average, the reduction in the entropy of T is the mutual information.\nInformation gain is used to decide which feature to split on at each step in building the tree. Simplicity is best, so we want to keep our tree small. To do so, at each step we should choose the split that results in the purest daughter nodes. A commonly used measure of purity is called information which is measured in bits. For each node of the tree, the information value "represents the expected amount of information that would be needed to specify whether a new instance should be classified yes or no, given that the example reached that node".Consider an example data set with four attributes: outlook (sunny, overcast, rainy), temperature (hot, mild, cool), humidity (high, normal), and windy (true, false), with a binary (yes or no) target variable, play, and 14 data points. To construct a decision tree on this data, we need to compare the information gain of each of four trees, each split on one of the four features. The split with the highest information gain will be taken as the first split and the process will continue until all children nodes are pure, or until the information gain is 0.\nThe split using the feature windy results in two children nodes, one for a windy value of true and one for a windy value of false. In this data set, there are six data points with a true windy value, three of which have a play (where play is the target variable) value of yes and three with a play value of no. The eight remaining data points with a windy value of false contain two no's and six yes's. The information of the windy=true node is calculated using the entropy equation above. Since there is an equal number of yes's and no's in this node, we have\n\n  \n    \n      \n        \n          I\n          \n            E\n          \n        \n        (\n        [\n        3\n        ,\n        3\n        ]\n        )\n        =\n        \u2212\n        \n          \n            3\n            6\n          \n        \n        \n          log\n          \n            2\n          \n          \n\n          \n        \n        \u2061\n        \n          \n            3\n            6\n          \n        \n        \u2212\n        \n          \n            3\n            6\n          \n        \n        \n          log\n          \n            2\n          \n          \n\n          \n        \n        \u2061\n        \n          \n            3\n            6\n          \n        \n        =\n        \u2212\n        \n          \n            1\n            2\n          \n        \n        \n          log\n          \n            2\n          \n          \n\n          \n        \n        \u2061\n        \n          \n            1\n            2\n          \n        \n        \u2212\n        \n          \n            1\n            2\n          \n        \n        \n          log\n          \n            2\n          \n          \n\n          \n        \n        \u2061\n        \n          \n            1\n            2\n          \n        \n        =\n        1\n      \n    \n    {\\displaystyle I_{E}([3,3])=-{\\frac {3}{6}}\\log _{2}^{}{\\frac {3}{6}}-{\\frac {3}{6}}\\log _{2}^{}{\\frac {3}{6}}=-{\\frac {1}{2}}\\log _{2}^{}{\\frac {1}{2}}-{\\frac {1}{2}}\\log _{2}^{}{\\frac {1}{2}}=1}\n  For the node where windy=false there were eight data points, six yes's and two no's. Thus we have\n\n  \n    \n      \n        \n          I\n          \n            E\n          \n        \n        (\n        [\n        6\n        ,\n        2\n        ]\n        )\n        =\n        \u2212\n        \n          \n            6\n            8\n          \n        \n        \n          log\n          \n            2\n          \n          \n\n          \n        \n        \u2061\n        \n          \n            6\n            8\n          \n        \n        \u2212\n        \n          \n            2\n            8\n          \n        \n        \n          log\n          \n            2\n          \n          \n\n          \n        \n        \u2061\n        \n          \n            2\n            8\n          \n        \n        =\n        \u2212\n        \n          \n            3\n            4\n          \n        \n        \n          log\n          \n            2\n          \n          \n\n          \n        \n        \u2061\n        \n          \n            3\n            4\n          \n        \n        \u2212\n        \n          \n            1\n            4\n          \n        \n        \n          log\n          \n            2\n          \n          \n\n          \n        \n        \u2061\n        \n          \n            1\n            4\n          \n        \n        =\n        0.81\n      \n    \n    {\\displaystyle I_{E}([6,2])=-{\\frac {6}{8}}\\log _{2}^{}{\\frac {6}{8}}-{\\frac {2}{8}}\\log _{2}^{}{\\frac {2}{8}}=-{\\frac {3}{4}}\\log _{2}^{}{\\frac {3}{4}}-{\\frac {1}{4}}\\log _{2}^{}{\\frac {1}{4}}=0.81}\n  To find the information of the split, we take the weighted average of these two numbers based on how many observations fell into which node.\n\n  \n    \n      \n        \n          I\n          \n            E\n          \n        \n        (\n        [\n        3\n        ,\n        3\n        ]\n        ,\n        [\n        6\n        ,\n        2\n        ]\n        )\n        =\n        \n          I\n          \n            E\n          \n        \n        (\n        \n          windy or not\n        \n        )\n        =\n        \n          \n            6\n            14\n          \n        \n        \u22c5\n        1\n        +\n        \n          \n            8\n            14\n          \n        \n        \u22c5\n        0.81\n        =\n        0.89\n      \n    \n    {\\displaystyle I_{E}([3,3],[6,2])=I_{E}({\\text{windy or not}})={\\frac {6}{14}}\\cdot 1+{\\frac {8}{14}}\\cdot 0.81=0.89}\n  To find the information gain of the split using windy, we must first calculate the information in the data before the split. The original data contained nine yes's and five no's.\n\n  \n    \n      \n        \n          I\n          \n            E\n          \n        \n        (\n        [\n        9\n        ,\n        5\n        ]\n        )\n        =\n        \u2212\n        \n          \n            9\n            14\n          \n        \n        \n          log\n          \n            2\n          \n          \n\n          \n        \n        \u2061\n        \n          \n            9\n            14\n          \n        \n        \u2212\n        \n          \n            5\n            14\n          \n        \n        \n          log\n          \n            2\n          \n        \n        \u2061\n        \n          \n            5\n            14\n          \n        \n        =\n        0.94\n      \n    \n    {\\displaystyle I_{E}([9,5])=-{\\frac {9}{14}}\\log _{2}^{}{\\frac {9}{14}}-{\\frac {5}{14}}\\log _{2}{\\frac {5}{14}}=0.94}\n  Now we can calculate the information gain achieved by splitting on the windy feature.\n\n  \n    \n      \n        I\n        G\n        (\n        \n          windy\n        \n        )\n        =\n        \n          I\n          \n            E\n          \n        \n        (\n        [\n        9\n        ,\n        5\n        ]\n        )\n        \u2212\n        \n          I\n          \n            E\n          \n        \n        (\n        [\n        3\n        ,\n        3\n        ]\n        ,\n        [\n        6\n        ,\n        2\n        ]\n        )\n        =\n        0.94\n        \u2212\n        0.89\n        =\n        0.05\n      \n    \n    {\\displaystyle IG({\\text{windy}})=I_{E}([9,5])-I_{E}([3,3],[6,2])=0.94-0.89=0.05}\n  To build the tree, the information gain of each possible first split would need to be calculated. The best first split is the one that provides the most information gain. This process is repeated for each impure node until the tree is complete. This example is adapted from the example appearing in Witten et al.\n\n\n=== Variance reduction ===\nIntroduced in CART, variance reduction is often employed in cases where the target variable is continuous (regression tree), meaning that use of many other metrics would first require discretization before being applied. The variance reduction of a node N is defined as the total reduction of the variance of the target variable x due to the split at this node:\n\n  \n    \n      \n        \n          I\n          \n            V\n          \n        \n        (\n        N\n        )\n        =\n        \n          \n            1\n            \n              \n                |\n              \n              S\n              \n                \n                  |\n                \n                \n                  2\n                \n              \n            \n          \n        \n        \n          \u2211\n          \n            i\n            \u2208\n            S\n          \n        \n        \n          \u2211\n          \n            j\n            \u2208\n            S\n          \n        \n        \n          \n            1\n            2\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        \u2212\n        \n          x\n          \n            j\n          \n        \n        \n          )\n          \n            2\n          \n        \n        \u2212\n        \n          (\n          \n            \n              \n                1\n                \n                  \n                    |\n                  \n                  \n                    S\n                    \n                      t\n                    \n                  \n                  \n                    \n                      |\n                    \n                    \n                      2\n                    \n                  \n                \n              \n            \n            \n              \u2211\n              \n                i\n                \u2208\n                \n                  S\n                  \n                    t\n                  \n                \n              \n            \n            \n              \u2211\n              \n                j\n                \u2208\n                \n                  S\n                  \n                    t\n                  \n                \n              \n            \n            \n              \n                1\n                2\n              \n            \n            (\n            \n              x\n              \n                i\n              \n            \n            \u2212\n            \n              x\n              \n                j\n              \n            \n            \n              )\n              \n                2\n              \n            \n            +\n            \n              \n                1\n                \n                  \n                    |\n                  \n                  \n                    S\n                    \n                      f\n                    \n                  \n                  \n                    \n                      |\n                    \n                    \n                      2\n                    \n                  \n                \n              \n            \n            \n              \u2211\n              \n                i\n                \u2208\n                \n                  S\n                  \n                    f\n                  \n                \n              \n            \n            \n              \u2211\n              \n                j\n                \u2208\n                \n                  S\n                  \n                    f\n                  \n                \n              \n            \n            \n              \n                1\n                2\n              \n            \n            (\n            \n              x\n              \n                i\n              \n            \n            \u2212\n            \n              x\n              \n                j\n              \n            \n            \n              )\n              \n                2\n              \n            \n          \n          )\n        \n      \n    \n    {\\displaystyle I_{V}(N)={\\frac {1}{|S|^{2}}}\\sum _{i\\in S}\\sum _{j\\in S}{\\frac {1}{2}}(x_{i}-x_{j})^{2}-\\left({\\frac {1}{|S_{t}|^{2}}}\\sum _{i\\in S_{t}}\\sum _{j\\in S_{t}}{\\frac {1}{2}}(x_{i}-x_{j})^{2}+{\\frac {1}{|S_{f}|^{2}}}\\sum _{i\\in S_{f}}\\sum _{j\\in S_{f}}{\\frac {1}{2}}(x_{i}-x_{j})^{2}\\right)}\n  where \n  \n    \n      \n        S\n      \n    \n    {\\displaystyle S}\n  , \n  \n    \n      \n        \n          S\n          \n            t\n          \n        \n      \n    \n    {\\displaystyle S_{t}}\n  , and \n  \n    \n      \n        \n          S\n          \n            f\n          \n        \n      \n    \n    {\\displaystyle S_{f}}\n   are the set of presplit sample indices, set of sample indices for which the split test is true, and set of sample indices for which the split test is false, respectively. Each of the above summands are indeed variance estimates, though, written in a form without directly referring to the mean.\n\n\n== Uses ==\n\n\n=== Advantages ===\nAmongst other data mining methods, decision trees have various advantages:\n\nSimple to understand and interpret. People are able to understand decision tree models after a brief explanation. Trees can also be displayed graphically in a way that is easy for non-experts to interpret.\nAble to handle both numerical and categorical data. Other techniques are usually specialized in analyzing datasets that have only one type of variable. (For example, relation rules can be used only with nominal variables while neural networks can be used only with numerical variables or categoricals converted to 0-1 values.) Early decision trees were only capable of handling categorical variables, but more recent versions, such as C4.5, do not have this limitation.\nRequires little data preparation. Other techniques often require data normalization. Since trees can handle qualitative predictors, there is no need to create dummy variables.\nUses a white box or open-box model. If a given situation is observable in a model the explanation for the condition is easily explained by boolean logic. By contrast, in a black box model, the explanation for the results is typically difficult to understand, for example with an artificial neural network.\nPossible to validate a model using statistical tests. That makes it possible to account for the reliability of the model.\nNon-statistical approach that makes no assumptions of the training data or prediction residuals; e.g., no distributional, independence, or constant variance assumptions\nPerforms well with large datasets. Large amounts of data can be analyzed using standard computing resources in reasonable time.\nMirrors human decision making more closely than other approaches. This could be useful when modeling human decisions/behavior.\nRobust against co-linearity, particularly boosting\nIn built feature selection. Additional irrelevant feature will be less used so that they can be removed on subsequent runs. The hierarchy of attributes in a decision tree reflects the importance of attributes. It means that the features on top are the most informative.\nDecision trees can approximate any Boolean function eq. XOR.\n\n\n=== Limitations ===\nTrees can be very non-robust. A small change in the training data can result in a large change in the tree and consequently the final predictions.\nThe problem of learning an optimal decision tree is known to be NP-complete under several aspects of optimality and even for simple concepts. Consequently, practical decision-tree learning algorithms are based on heuristics such as the greedy algorithm where locally optimal decisions are made at each node. Such algorithms cannot guarantee to return the globally optimal decision tree. To reduce the greedy effect of local optimality, some methods such as the dual information distance (DID) tree were proposed.\nDecision-tree learners can create over-complex trees that do not generalize well from the training data.  (This is known as overfitting.)  Mechanisms such as pruning are necessary to avoid this problem (with the exception of some algorithms such as the Conditional Inference approach, that does not require pruning).\nFor data including categorical variables with different numbers of levels, information gain in decision trees is biased in favor of attributes with more levels. However, the issue of biased predictor selection is avoided by the Conditional Inference approach, a two-stage approach, or adaptive leave-one-out feature selection.\n\n\n=== Implementations ===\nMany data mining software packages provide implementations of one or more decision tree algorithms.\nExamples include Salford Systems CART (which licensed the proprietary code of the original CART authors), IBM SPSS Modeler, RapidMiner, SAS Enterprise Miner, Matlab, R (an open-source software environment for statistical computing, which includes several CART implementations such as rpart, party and randomForest packages), Weka (a free and open-source data-mining suite, contains many decision tree algorithms), Orange, KNIME, Microsoft SQL Server [1], and scikit-learn (a free and open-source machine learning library for the Python programming language).\n\n\n== Extensions ==\n\n\n=== Decision graphs ===\nIn a decision tree, all paths from the root node to the leaf node proceed by way of conjunction, or AND. In a decision graph, it is possible to use disjunctions (ORs) to join two more paths together using minimum message length (MML).  Decision graphs have been further extended to allow for previously unstated new attributes to be learnt dynamically and used at different places within the graph.  The more general coding scheme results in better predictive accuracy and log-loss probabilistic scoring.  In general, decision graphs infer models with fewer leaves than decision trees.\n\n\n=== Alternative search methods ===\nEvolutionary algorithms have been used to avoid local optimal decisions and search the decision tree space with little a priori bias.It is also possible for a tree to be sampled using MCMC.The tree can be searched for in a bottom-up fashion.\n\n\n== See also ==\n\n\n== References ==\n\n\n== Further reading ==\nJames, Gareth; Witten, Daniela; Hastie, Trevor; Tibshirani, Robert (2017). "Tree-Based Methods" (PDF). An Introduction to Statistical Learning: with Applications in R. New York: Springer. pp. 303\u2013336. ISBN 978-1-4614-7137-0.\n\n\n== External links ==\nEvolutionary Learning of Decision Trees in C++\nA very detailed explanation of information gain as splitting criterion