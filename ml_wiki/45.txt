Given a collection of points in two, three, or higher dimensional space, a "best fitting" line can be defined as one that minimizes the average squared perpendicular distance from a point to the line. The next best-fitting line can be similarly chosen from directions perpendicular to the first. Repeating this process yields an orthogonal  basis in which different individual dimensions of the data are uncorrelated. These basis vectors are called Principal Components, and several related procedures Principal Component Analysis (PCA). \nPCA is mostly used as a tool in exploratory data analysis and for making predictive models. It is commonly used for dimensionality reduction i.e. by projecting each data point onto only the first few principal components. The first principal component can equivalently be defined as a direction that maximizes the variance of the projected data. The \n  \n    \n      \n        \n          i\n          \n            t\n            h\n          \n        \n      \n    \n    {\\displaystyle i^{th}}\n   principal component can be taken as a direction orthogonal to the first \n  \n    \n      \n        i\n        \u2212\n        1\n      \n    \n    {\\displaystyle i-1}\n   principal components that maximizes the variance of the projected data. From either objective, it can be shown that the principal components are eigenvectors of the data's covariance matrix. Thus, principal components are often computed using eigendecomposition of the data covariance matrix or singular value decomposition of the data matrix. \nPCA is the simplest of the true eigenvector-based multivariate analyses. PCA is closely related to factor analysis. Factor analysis typically incorporates more domain specific assumptions about the underlying structure and solves eigenvectors of a slightly different matrix. PCA is also related to canonical correlation analysis (CCA). CCA defines coordinate systems that optimally describe the cross-covariance between two datasets while PCA defines a new orthogonal coordinate system that optimally describes variance in a single dataset.Robust and L1-norm-based variants of standard PCA have also been proposed.\n\n\n== History ==\nPCA was invented in 1901 by Karl Pearson, as an analogue of the principal axis theorem in mechanics; it was later independently developed and named by Harold Hotelling in the 1930s. Depending on the field of application, it is also named the discrete Karhunen\u2013Lo\xe8ve transform (KLT) in signal processing, the Hotelling transform in multivariate quality control, proper orthogonal decomposition (POD) in mechanical engineering, singular value decomposition (SVD) of X (Golub and Van Loan, 1983), eigenvalue decomposition (EVD) of XTX in linear algebra, factor analysis (for a discussion of the differences between PCA and factor analysis see Ch. 7 of Jolliffe's Principal Component Analysis), Eckart\u2013Young theorem (Harman, 1960), or empirical orthogonal functions (EOF) in meteorological science, empirical eigenfunction decomposition (Sirovich, 1987), empirical component analysis (Lorenz, 1956), quasiharmonic modes (Brooks et al., 1988), spectral decomposition in noise and vibration, and empirical modal analysis in structural dynamics.\n\n\n== Intuition ==\nPCA can be thought of as fitting a p-dimensional ellipsoid to the data, where each axis of the ellipsoid represents a principal component. If some axis of the ellipsoid is small, then the variance along that axis is also small, and by omitting that axis and its corresponding principal component from our representation of the dataset, we lose only an equally small amount of information.\nTo find the axes of the ellipsoid, we must first subtract the mean of each variable from the dataset to center the data around the origin. Then, we compute the covariance matrix of the data and calculate the eigenvalues and corresponding eigenvectors of this covariance matrix. Then we must normalize each of the orthogonal eigenvectors to turn them into unit vectors. Once this is done, each of the mutually orthogonal, unit eigenvectors can be interpreted as an axis of the ellipsoid fitted to the data. This choice of basis will transform our covariance matrix into a diagonalised form with the diagonal elements representing the variance of each axis. The proportion of the variance that each eigenvector represents can be calculated by dividing the eigenvalue corresponding to that eigenvector by the sum of all eigenvalues.\nThis procedure is sensitive to the scaling of the data, and there is no consensus as to how to best scale the data to obtain optimal results.\n\n\n== Details ==\nPCA is defined as an orthogonal linear transformation that transforms the data to a new coordinate system such that the greatest variance by some scalar projection of the data comes to lie on the first coordinate (called the first principal component), the second greatest variance on the second coordinate, and so on.Consider an \n  \n    \n      \n        n\n        \xd7\n        p\n      \n    \n    {\\displaystyle n\\times p}\n   data matrix, X, with column-wise zero empirical mean (the sample mean of each column has been shifted to zero), where each of the n rows represents a different repetition of the experiment, and each of the p columns gives a particular kind of feature (say, the results from a particular sensor).\nMathematically, the transformation is defined by a set of size \n  \n    \n      \n        l\n      \n    \n    {\\displaystyle l}\n   of p-dimensional vectors of weights or coefficients \n  \n    \n      \n        \n          \n            w\n          \n          \n            (\n            k\n            )\n          \n        \n        =\n        (\n        \n          w\n          \n            1\n          \n        \n        ,\n        \u2026\n        ,\n        \n          w\n          \n            p\n          \n        \n        \n          )\n          \n            (\n            k\n            )\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {w} _{(k)}=(w_{1},\\dots ,w_{p})_{(k)}}\n   that map each row vector \n  \n    \n      \n        \n          \n            x\n          \n          \n            (\n            i\n            )\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{(i)}}\n   of X to a new vector of principal component scores \n  \n    \n      \n        \n          \n            t\n          \n          \n            (\n            i\n            )\n          \n        \n        =\n        (\n        \n          t\n          \n            1\n          \n        \n        ,\n        \u2026\n        ,\n        \n          t\n          \n            l\n          \n        \n        \n          )\n          \n            (\n            i\n            )\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {t} _{(i)}=(t_{1},\\dots ,t_{l})_{(i)}}\n  , given by\n\n  \n    \n      \n        \n          \n            \n              t\n              \n                k\n              \n            \n          \n          \n            (\n            i\n            )\n          \n        \n        =\n        \n          \n            x\n          \n          \n            (\n            i\n            )\n          \n        \n        \u22c5\n        \n          \n            w\n          \n          \n            (\n            k\n            )\n          \n        \n        \n        \n          f\n          o\n          r\n        \n        \n        i\n        =\n        1\n        ,\n        \u2026\n        ,\n        n\n        \n        k\n        =\n        1\n        ,\n        \u2026\n        ,\n        l\n      \n    \n    {\\displaystyle {t_{k}}_{(i)}=\\mathbf {x} _{(i)}\\cdot \\mathbf {w} _{(k)}\\qquad \\mathrm {for} \\qquad i=1,\\dots ,n\\qquad k=1,\\dots ,l}\n  in such a way that the individual variables \n  \n    \n      \n        \n          t\n          \n            1\n          \n        \n        ,\n        \u2026\n        ,\n        \n          t\n          \n            l\n          \n        \n      \n    \n    {\\displaystyle t_{1},\\dots ,t_{l}}\n   of t considered over the data set successively inherit the maximum possible variance from X, with each coefficient vector w constrained to be a unit vector (where \n  \n    \n      \n        l\n      \n    \n    {\\displaystyle l}\n   is usually selected to be less than \n  \n    \n      \n        p\n      \n    \n    {\\displaystyle p}\n   to reduce dimensionality).\n\n\n=== First component ===\nIn order to maximize variance, the first weight vector w(1) thus has to satisfy\n\n  \n    \n      \n        \n          \n            w\n          \n          \n            (\n            1\n            )\n          \n        \n        =\n        \n          \n            \n              arg\n              \n              m\n              a\n              x\n            \n            \n              \u2016\n              \n                w\n              \n              \u2016\n              =\n              1\n            \n          \n        \n        \n        \n          {\n          \n            \n              \u2211\n              \n                i\n              \n            \n            \n              \n                (\n                \n                  t\n                  \n                    1\n                  \n                \n                )\n              \n              \n                (\n                i\n                )\n              \n              \n                2\n              \n            \n          \n          }\n        \n        =\n        \n          \n            \n              arg\n              \n              m\n              a\n              x\n            \n            \n              \u2016\n              \n                w\n              \n              \u2016\n              =\n              1\n            \n          \n        \n        \n        \n          {\n          \n            \n              \u2211\n              \n                i\n              \n            \n            \n              \n                (\n                \n                  \n                    \n                      x\n                    \n                    \n                      (\n                      i\n                      )\n                    \n                  \n                  \u22c5\n                  \n                    w\n                  \n                \n                )\n              \n              \n                2\n              \n            \n          \n          }\n        \n      \n    \n    {\\displaystyle \\mathbf {w} _{(1)}={\\underset {\\Vert \\mathbf {w} \\Vert =1}{\\operatorname {\\arg \\,max} }}\\,\\left\\{\\sum _{i}\\left(t_{1}\\right)_{(i)}^{2}\\right\\}={\\underset {\\Vert \\mathbf {w} \\Vert =1}{\\operatorname {\\arg \\,max} }}\\,\\left\\{\\sum _{i}\\left(\\mathbf {x} _{(i)}\\cdot \\mathbf {w} \\right)^{2}\\right\\}}\n  Equivalently, writing this in matrix form gives\n\n  \n    \n      \n        \n          \n            w\n          \n          \n            (\n            1\n            )\n          \n        \n        =\n        \n          \n            \n              arg\n              \n              m\n              a\n              x\n            \n            \n              \u2016\n              \n                w\n              \n              \u2016\n              =\n              1\n            \n          \n        \n        \n        {\n        \u2016\n        \n          X\n          w\n        \n        \n          \u2016\n          \n            2\n          \n        \n        }\n        =\n        \n          \n            \n              arg\n              \n              m\n              a\n              x\n            \n            \n              \u2016\n              \n                w\n              \n              \u2016\n              =\n              1\n            \n          \n        \n        \n        \n          {\n          \n            \n              \n                w\n              \n              \n                T\n              \n            \n            \n              \n                X\n                \n                  T\n                \n              \n            \n            \n              X\n              w\n            \n          \n          }\n        \n      \n    \n    {\\displaystyle \\mathbf {w} _{(1)}={\\underset {\\Vert \\mathbf {w} \\Vert =1}{\\operatorname {\\arg \\,max} }}\\,\\{\\Vert \\mathbf {Xw} \\Vert ^{2}\\}={\\underset {\\Vert \\mathbf {w} \\Vert =1}{\\operatorname {\\arg \\,max} }}\\,\\left\\{\\mathbf {w} ^{T}\\mathbf {X^{T}} \\mathbf {Xw} \\right\\}}\n  Since w(1) has been defined to be a unit vector, it equivalently also satisfies\n\n  \n    \n      \n        \n          \n            w\n          \n          \n            (\n            1\n            )\n          \n        \n        =\n        \n          \n            arg\n            \n            m\n            a\n            x\n          \n        \n        \n        \n          {\n          \n            \n              \n                \n                  \n                    w\n                  \n                  \n                    T\n                  \n                \n                \n                  \n                    X\n                    \n                      T\n                    \n                  \n                \n                \n                  X\n                  w\n                \n              \n              \n                \n                  \n                    w\n                  \n                  \n                    T\n                  \n                \n                \n                  w\n                \n              \n            \n          \n          }\n        \n      \n    \n    {\\displaystyle \\mathbf {w} _{(1)}={\\operatorname {\\arg \\,max} }\\,\\left\\{{\\frac {\\mathbf {w} ^{T}\\mathbf {X^{T}} \\mathbf {Xw} }{\\mathbf {w} ^{T}\\mathbf {w} }}\\right\\}}\n  The quantity to be maximised can be recognised as a Rayleigh quotient. A standard result for a positive semidefinite matrix such as XTX is that the quotient's maximum possible value is the largest eigenvalue of the matrix, which occurs when w is the corresponding eigenvector.\nWith w(1) found, the first principal component of a data vector x(i) can then be given as a score t1(i) = x(i) \u22c5 w(1) in the transformed co-ordinates, or as the corresponding vector in the original variables, {x(i) \u22c5 w(1)} w(1).\n\n\n=== Further components ===\nThe kth component can be found by subtracting the first k \u2212 1 principal components from X:\n\n  \n    \n      \n        \n          \n            \n              \n                X\n                ^\n              \n            \n          \n          \n            k\n          \n        \n        =\n        \n          X\n        \n        \u2212\n        \n          \u2211\n          \n            s\n            =\n            1\n          \n          \n            k\n            \u2212\n            1\n          \n        \n        \n          X\n        \n        \n          \n            w\n          \n          \n            (\n            s\n            )\n          \n        \n        \n          \n            w\n          \n          \n            (\n            s\n            )\n          \n          \n            \n              T\n            \n          \n        \n      \n    \n    {\\displaystyle \\mathbf {\\hat {X}} _{k}=\\mathbf {X} -\\sum _{s=1}^{k-1}\\mathbf {X} \\mathbf {w} _{(s)}\\mathbf {w} _{(s)}^{\\rm {T}}}\n  and then finding the weight vector which extracts the maximum variance from this new data matrix\n\n  \n    \n      \n        \n          \n            w\n          \n          \n            (\n            k\n            )\n          \n        \n        =\n        \n          \n            \n              a\n              r\n              g\n              \n              m\n              a\n              x\n            \n            \n              \u2016\n              \n                w\n              \n              \u2016\n              =\n              1\n            \n          \n        \n        \n          {\n          \n            \u2016\n            \n              \n                \n                  \n                    X\n                    ^\n                  \n                \n              \n              \n                k\n              \n            \n            \n              w\n            \n            \n              \u2016\n              \n                2\n              \n            \n          \n          }\n        \n        =\n        \n          \n            arg\n            \n            m\n            a\n            x\n          \n        \n        \n        \n          {\n          \n            \n              \n                \n                  \n                    \n                      w\n                    \n                    \n                      T\n                    \n                  \n                  \n                    \n                      \n                        \n                          X\n                          ^\n                        \n                      \n                    \n                    \n                      k\n                    \n                    \n                      T\n                    \n                  \n                  \n                    \n                      \n                        \n                          X\n                          ^\n                        \n                      \n                    \n                    \n                      k\n                    \n                  \n                  \n                    w\n                  \n                \n                \n                  \n                    \n                      w\n                    \n                    \n                      T\n                    \n                  \n                  \n                    w\n                  \n                \n              \n            \n          \n          }\n        \n      \n    \n    {\\displaystyle \\mathbf {w} _{(k)}={\\underset {\\Vert \\mathbf {w} \\Vert =1}{\\operatorname {arg\\,max} }}\\left\\{\\Vert \\mathbf {\\hat {X}} _{k}\\mathbf {w} \\Vert ^{2}\\right\\}={\\operatorname {\\arg \\,max} }\\,\\left\\{{\\tfrac {\\mathbf {w} ^{T}\\mathbf {\\hat {X}} _{k}^{T}\\mathbf {\\hat {X}} _{k}\\mathbf {w} }{\\mathbf {w} ^{T}\\mathbf {w} }}\\right\\}}\n  It turns out that this gives the remaining eigenvectors of XTX, with the maximum values for the quantity in brackets given by their corresponding eigenvalues. Thus the weight vectors are eigenvectors of XTX.\nThe kth principal component of a data vector x(i) can therefore be given as a score tk(i) = x(i) \u22c5 w(k) in the transformed co-ordinates, or as the corresponding vector in the space of the original variables, {x(i) \u22c5 w(k)} w(k), where w(k) is the kth eigenvector of XTX.\nThe full principal components decomposition of X can therefore be given as\n\n  \n    \n      \n        \n          T\n        \n        =\n        \n          X\n        \n        \n          W\n        \n      \n    \n    {\\displaystyle \\mathbf {T} =\\mathbf {X} \\mathbf {W} }\n  where W is a p-by-p matrix of weights whose columns are the eigenvectors of XTX. The transpose of W is sometimes called the whitening or sphering transformation. Columns of W multiplied by the square root of corresponding eigenvalues, that is, eigenvectors scaled up by the variances, are called loadings in PCA or in Factor analysis.\n\n\n=== Covariances ===\nXTX itself can be recognised as proportional to the empirical sample covariance matrix of the dataset XT.\nThe sample covariance Q between two of the different principal components over the dataset is given by:\n\n  \n    \n      \n        \n          \n            \n              \n                Q\n                (\n                \n                  \n                    P\n                    C\n                  \n                  \n                    (\n                    j\n                    )\n                  \n                \n                ,\n                \n                  \n                    P\n                    C\n                  \n                  \n                    (\n                    k\n                    )\n                  \n                \n                )\n              \n              \n                \n                \u221d\n                (\n                \n                  X\n                \n                \n                  \n                    w\n                  \n                  \n                    (\n                    j\n                    )\n                  \n                \n                \n                  )\n                  \n                    T\n                  \n                \n                (\n                \n                  X\n                \n                \n                  \n                    w\n                  \n                  \n                    (\n                    k\n                    )\n                  \n                \n                )\n              \n            \n            \n              \n              \n                \n                =\n                \n                  \n                    w\n                  \n                  \n                    (\n                    j\n                    )\n                  \n                  \n                    T\n                  \n                \n                \n                  \n                    X\n                  \n                  \n                    T\n                  \n                \n                \n                  X\n                \n                \n                  \n                    w\n                  \n                  \n                    (\n                    k\n                    )\n                  \n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  \n                    w\n                  \n                  \n                    (\n                    j\n                    )\n                  \n                  \n                    T\n                  \n                \n                \n                  \u03bb\n                  \n                    (\n                    k\n                    )\n                  \n                \n                \n                  \n                    w\n                  \n                  \n                    (\n                    k\n                    )\n                  \n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  \u03bb\n                  \n                    (\n                    k\n                    )\n                  \n                \n                \n                  \n                    w\n                  \n                  \n                    (\n                    j\n                    )\n                  \n                  \n                    T\n                  \n                \n                \n                  \n                    w\n                  \n                  \n                    (\n                    k\n                    )\n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}Q(\\mathrm {PC} _{(j)},\\mathrm {PC} _{(k)})&\\propto (\\mathbf {X} \\mathbf {w} _{(j)})^{T}(\\mathbf {X} \\mathbf {w} _{(k)})\\\\&=\\mathbf {w} _{(j)}^{T}\\mathbf {X} ^{T}\\mathbf {X} \\mathbf {w} _{(k)}\\\\&=\\mathbf {w} _{(j)}^{T}\\lambda _{(k)}\\mathbf {w} _{(k)}\\\\&=\\lambda _{(k)}\\mathbf {w} _{(j)}^{T}\\mathbf {w} _{(k)}\\end{aligned}}}\n  where the eigenvalue property of w(k) has been used to move from line 2 to line 3. However eigenvectors w(j) and w(k) corresponding to eigenvalues of a symmetric matrix are orthogonal (if the eigenvalues are different), or can be orthogonalised (if the vectors happen to share an equal repeated value). The product in the final line is therefore zero; there is no sample covariance between different principal components over the dataset.\nAnother way to characterise the principal components transformation is therefore as the transformation to coordinates which diagonalise the empirical sample covariance matrix.\nIn matrix form, the empirical covariance matrix for the original variables can be written\n\n  \n    \n      \n        \n          Q\n        \n        \u221d\n        \n          \n            X\n          \n          \n            T\n          \n        \n        \n          X\n        \n        =\n        \n          W\n        \n        \n          \u039b\n        \n        \n          \n            W\n          \n          \n            T\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {Q} \\propto \\mathbf {X} ^{T}\\mathbf {X} =\\mathbf {W} \\mathbf {\\Lambda } \\mathbf {W} ^{T}}\n  The empirical covariance matrix between the principal components becomes\n\n  \n    \n      \n        \n          \n            W\n          \n          \n            T\n          \n        \n        \n          Q\n        \n        \n          W\n        \n        \u221d\n        \n          \n            W\n          \n          \n            T\n          \n        \n        \n          W\n        \n        \n        \n          \u039b\n        \n        \n        \n          \n            W\n          \n          \n            T\n          \n        \n        \n          W\n        \n        =\n        \n          \u039b\n        \n      \n    \n    {\\displaystyle \\mathbf {W} ^{T}\\mathbf {Q} \\mathbf {W} \\propto \\mathbf {W} ^{T}\\mathbf {W} \\,\\mathbf {\\Lambda } \\,\\mathbf {W} ^{T}\\mathbf {W} =\\mathbf {\\Lambda } }\n  where \u039b is the diagonal matrix of eigenvalues \u03bb(k) of XTX. \u03bb(k) is equal to the sum of the squares over the dataset associated with each component k, that is, \u03bb(k) = \u03a3i tk2(i) = \u03a3i (x(i) \u22c5 w(k))2.\n\n\n=== Dimensionality reduction ===\nThe transformation T = X W maps a data vector x(i) from an original space of p variables to a new space of p variables which are uncorrelated over the dataset. However, not all the principal components need to be kept. Keeping only the first L principal components, produced by using only the first L eigenvectors, gives the truncated transformation\n\n  \n    \n      \n        \n          \n            T\n          \n          \n            L\n          \n        \n        =\n        \n          X\n        \n        \n          \n            W\n          \n          \n            L\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {T} _{L}=\\mathbf {X} \\mathbf {W} _{L}}\n  where the matrix TL now has n rows but only L columns. In other words, PCA learns a linear transformation \n  \n    \n      \n        t\n        =\n        \n          W\n          \n            T\n          \n        \n        x\n        ,\n        x\n        \u2208\n        \n          R\n          \n            p\n          \n        \n        ,\n        t\n        \u2208\n        \n          R\n          \n            L\n          \n        \n        ,\n      \n    \n    {\\displaystyle t=W^{T}x,x\\in R^{p},t\\in R^{L},}\n   where the columns of p \xd7 L matrix W form an orthogonal basis for the L features (the components of representation t) that are decorrelated. By construction, of all the transformed data matrices with only L columns, this score matrix maximises the variance in the original data that has been preserved, while minimising the total squared reconstruction error \n  \n    \n      \n        \u2016\n        \n          T\n        \n        \n          \n            W\n          \n          \n            T\n          \n        \n        \u2212\n        \n          \n            T\n          \n          \n            L\n          \n        \n        \n          \n            W\n          \n          \n            L\n          \n          \n            T\n          \n        \n        \n          \u2016\n          \n            2\n          \n          \n            2\n          \n        \n      \n    \n    {\\displaystyle \\|\\mathbf {T} \\mathbf {W} ^{T}-\\mathbf {T} _{L}\\mathbf {W} _{L}^{T}\\|_{2}^{2}}\n   or \n  \n    \n      \n        \u2016\n        \n          X\n        \n        \u2212\n        \n          \n            X\n          \n          \n            L\n          \n        \n        \n          \u2016\n          \n            2\n          \n          \n            2\n          \n        \n      \n    \n    {\\displaystyle \\|\\mathbf {X} -\\mathbf {X} _{L}\\|_{2}^{2}}\n  .\n\nSuch dimensionality reduction can be a very useful step for visualising and processing high-dimensional datasets, while still retaining as much of the variance in the dataset as possible. For example, selecting L = 2 and keeping only the first two principal components finds the two-dimensional plane through the high-dimensional dataset in which the data is most spread out, so if the data contains clusters these too may be most spread out, and therefore most visible to be plotted out in a two-dimensional diagram; whereas if two directions through the data (or two of the original variables) are chosen at random, the clusters may be much less spread apart from each other, and may in fact be much more likely to substantially overlay each other, making them indistinguishable.\nSimilarly, in regression analysis, the larger the number of explanatory variables allowed, the greater is the chance of overfitting the model, producing conclusions that fail to generalise to other datasets. One approach, especially when there are strong correlations between different possible explanatory variables, is to reduce them to a few principal components and then run the regression against them, a method called principal component regression.\nDimensionality reduction may also be appropriate when the variables in a dataset are noisy. If each column of the dataset contains independent identically distributed Gaussian noise, then the columns of T will also contain similarly identically distributed Gaussian noise (such a distribution is invariant under the effects of the matrix W, which can be thought of as a high-dimensional rotation of the co-ordinate axes). However, with more of the total variance concentrated in the first few principal components compared to the same noise variance, the proportionate effect of the noise is less\u2014the first few components achieve a higher signal-to-noise ratio. PCA thus can have the effect of concentrating much of the signal into the first few principal components, which can usefully be captured by dimensionality reduction; while the later principal components may be dominated by noise, and so disposed of without great loss. If the dataset is not too large, the significance of the principal components can be tested using parametric bootstrap, as an aid in determining how many principal components to retain .\n\n\n=== Singular value decomposition ===\nThe principal components transformation can also be associated with another matrix factorization, the singular value decomposition (SVD) of X,\n\n  \n    \n      \n        \n          X\n        \n        =\n        \n          U\n        \n        \n          \u03a3\n        \n        \n          \n            W\n          \n          \n            T\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {X} =\\mathbf {U} \\mathbf {\\Sigma } \\mathbf {W} ^{T}}\n  Here \u03a3 is an n-by-p rectangular diagonal matrix of positive numbers \u03c3(k), called the singular values of X; U is an n-by-n matrix, the columns of which are orthogonal unit vectors of length n called the left singular vectors of X; and W is a p-by-p whose columns are orthogonal unit vectors of length p and called the right singular vectors of X.\nIn terms of this factorization, the matrix XTX can be written\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  \n                    X\n                  \n                  \n                    T\n                  \n                \n                \n                  X\n                \n              \n              \n                \n                =\n                \n                  W\n                \n                \n                  \n                    \u03a3\n                  \n                  \n                    T\n                  \n                \n                \n                  \n                    U\n                  \n                  \n                    T\n                  \n                \n                \n                  U\n                \n                \n                  \u03a3\n                \n                \n                  \n                    W\n                  \n                  \n                    T\n                  \n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  W\n                \n                \n                  \n                    \u03a3\n                  \n                  \n                    T\n                  \n                \n                \n                  \u03a3\n                \n                \n                  \n                    W\n                  \n                  \n                    T\n                  \n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  W\n                \n                \n                  \n                    \n                      \n                        \u03a3\n                        ^\n                      \n                    \n                  \n                  \n                    2\n                  \n                \n                \n                  \n                    W\n                  \n                  \n                    T\n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}\\mathbf {X} ^{T}\\mathbf {X} &=\\mathbf {W} \\mathbf {\\Sigma } ^{T}\\mathbf {U} ^{T}\\mathbf {U} \\mathbf {\\Sigma } \\mathbf {W} ^{T}\\\\&=\\mathbf {W} \\mathbf {\\Sigma } ^{T}\\mathbf {\\Sigma } \\mathbf {W} ^{T}\\\\&=\\mathbf {W} \\mathbf {\\hat {\\Sigma }} ^{2}\\mathbf {W} ^{T}\\end{aligned}}}\n  where  \n  \n    \n      \n        \n          \n            \n              \u03a3\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle \\mathbf {\\hat {\\Sigma }} }\n   is the square diagonal matrix with the singular values of  X  and the excess zeros chopped off that satisfies  \n  \n    \n      \n        \n          \n            \n              \n                \n                  \u03a3\n                  ^\n                \n              \n            \n            \n              2\n            \n          \n        \n        =\n        \n          \n            \u03a3\n          \n          \n            T\n          \n        \n        \n          \u03a3\n        \n      \n    \n    {\\displaystyle \\mathbf {{\\hat {\\Sigma }}^{2}} =\\mathbf {\\Sigma } ^{T}\\mathbf {\\Sigma } }\n  . Comparison with the eigenvector factorization of XTX establishes that the right singular vectors W of X are equivalent to the eigenvectors of XTX, while the singular values \u03c3(k) of  \n  \n    \n      \n        \n          X\n        \n      \n    \n    {\\displaystyle \\mathbf {X} }\n   are equal to the square-root of the eigenvalues \u03bb(k) of XTX.\nUsing the singular value decomposition the score matrix T can be written\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  T\n                \n              \n              \n                \n                =\n                \n                  X\n                \n                \n                  W\n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  U\n                \n                \n                  \u03a3\n                \n                \n                  \n                    W\n                  \n                  \n                    T\n                  \n                \n                \n                  W\n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  U\n                \n                \n                  \u03a3\n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}\\mathbf {T} &=\\mathbf {X} \\mathbf {W} \\\\&=\\mathbf {U} \\mathbf {\\Sigma } \\mathbf {W} ^{T}\\mathbf {W} \\\\&=\\mathbf {U} \\mathbf {\\Sigma } \\end{aligned}}}\n  so each column of T is given by one of the left singular vectors of X multiplied by the corresponding singular value. This form is also the polar decomposition of T.\nEfficient algorithms exist to calculate the SVD of X without having to form the matrix XTX, so computing the SVD is now the standard way to calculate a principal components analysis from a data matrix, unless only a handful of components are required.\nAs with the eigen-decomposition, a truncated n \xd7 L score matrix TL can be obtained by considering only the first L largest singular values and their singular vectors:\n\n  \n    \n      \n        \n          \n            T\n          \n          \n            L\n          \n        \n        =\n        \n          \n            U\n          \n          \n            L\n          \n        \n        \n          \n            \u03a3\n          \n          \n            L\n          \n        \n        =\n        \n          X\n        \n        \n          \n            W\n          \n          \n            L\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {T} _{L}=\\mathbf {U} _{L}\\mathbf {\\Sigma } _{L}=\\mathbf {X} \\mathbf {W} _{L}}\n  The truncation of a matrix M or T using a truncated singular value decomposition in this way produces a truncated matrix that is the nearest possible matrix of rank L to the original matrix, in the sense of the difference between the two having the smallest possible Frobenius norm, a result known as the Eckart\u2013Young theorem [1936].\n\n\n== Further considerations ==\nGiven a set of points in Euclidean space, the first principal component corresponds to a line that passes through the multidimensional mean and minimizes the sum of squares of the distances of the points from the line. The second principal component corresponds to the same concept after all correlation with the first principal component has been subtracted from the points. The singular values (in \u03a3) are the square roots of the eigenvalues of the matrix XTX. Each eigenvalue is proportional to the portion of the "variance" (more correctly of the sum of the squared distances of the points from their multidimensional mean) that is associated with each eigenvector. The sum of all the eigenvalues is equal to the sum of the squared distances of the points from their multidimensional mean. PCA essentially rotates the set of points around their mean in order to align with the principal components. This moves as much of the variance as possible (using an orthogonal transformation) into the first few dimensions. The values in the remaining dimensions, therefore, tend to be small and may be dropped with minimal loss of information (see below). PCA is often used in this manner for dimensionality reduction. PCA has the distinction of being the optimal orthogonal transformation for keeping the subspace that has largest "variance" (as defined above). This advantage, however, comes at the price of greater computational requirements if compared, for example, and when applicable, to the discrete cosine transform, and in particular to the DCT-II which is simply known as the "DCT". Nonlinear dimensionality reduction techniques tend to be more computationally demanding than PCA.\nPCA is sensitive to the scaling of the variables. If we have just two variables and they have the same sample variance and are positively correlated, then the PCA will entail a rotation by 45\xb0 and the "weights" (they are the cosines of rotation) for the two variables with respect to the principal component will be equal. But if we multiply all values of the first variable by 100, then the first principal component will be almost the same as that variable, with a small contribution from the other variable, whereas the second component will be almost aligned with the second original variable. This means that whenever the different variables have different units (like temperature and mass), PCA is a somewhat arbitrary method of analysis. (Different results would be obtained if one used Fahrenheit rather than Celsius for example.) Pearson's original paper was entitled "On Lines and Planes of Closest Fit to Systems of Points in Space" \u2013 "in space" implies physical Euclidean space where such concerns do not arise. One way of making the PCA less arbitrary is to use variables scaled so as to have unit variance, by standardizing the data and hence use the autocorrelation matrix instead of the autocovariance matrix as a basis for PCA. However, this compresses (or expands) the fluctuations in all dimensions of the signal space to unit variance.\nMean subtraction (a.k.a. "mean centering") is necessary for performing classical PCA to ensure that the first principal component describes the direction of maximum variance. If mean subtraction is not performed, the first principal component might instead correspond more or less to the mean of the data. A mean of zero is needed for finding a basis that minimizes the mean square error of the approximation of the data.Mean-centering is unnecessary if performing a principal components analysis on a correlation matrix, as the data are already centered after calculating correlations. Correlations are derived from the cross-product of two standard scores (Z-scores) or statistical moments (hence the name: Pearson Product-Moment Correlation). Also see the article by Kromrey & Foster-Johnson (1998) on "Mean-centering in Moderated Regression: Much Ado About Nothing".\nPCA is a popular primary technique in pattern recognition. It is not, however, optimized for class separability. However, it has been used to quantify the distance between two or more classes by calculating center of mass for each class in principal component space and reporting Euclidean distance between center of mass of two or more classes. The linear discriminant analysis is an alternative which is optimized for class separability.\n\n\n== Table of symbols and abbreviations ==\n\n\n== Properties and limitations of PCA ==\n\n\n=== Properties ===\nSome properties of PCA include:\nProperty 1: For any integer q, 1 \u2264 q \u2264 p, consider the orthogonal linear transformation\n\n  \n    \n      \n        y\n        =\n        \n          \n            B\n            \u2032\n          \n        \n        x\n      \n    \n    {\\displaystyle y=\\mathbf {B'} x}\n  \nwhere \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n   is a q-element vector and \n  \n    \n      \n        \n          \n            B\n            \u2032\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {B'} }\n   is a (q \xd7 p) matrix, and let \n  \n    \n      \n        \n          \n            \u03a3\n          \n          \n            y\n          \n        \n        =\n        \n          \n            B\n            \u2032\n          \n        \n        \n          \u03a3\n        \n        \n          B\n        \n      \n    \n    {\\displaystyle \\mathbf {\\Sigma } _{y}=\\mathbf {B'} \\mathbf {\\Sigma } \\mathbf {B} }\n   be the variance-covariance matrix for \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n  . Then the trace of \n  \n    \n      \n        \n          \n            \u03a3\n          \n          \n            y\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {\\Sigma } _{y}}\n  , denoted \n  \n    \n      \n        \n          tr\n        \n        (\n        \n          \n            \u03a3\n          \n          \n            y\n          \n        \n        )\n      \n    \n    {\\displaystyle {\\text{tr}}(\\mathbf {\\Sigma } _{y})}\n  , is maximized by taking \n  \n    \n      \n        \n          B\n        \n        =\n        \n          \n            A\n          \n          \n            q\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {B} =\\mathbf {A} _{q}}\n  , where \n  \n    \n      \n        \n          \n            A\n          \n          \n            q\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {A} _{q}}\n   consists of the first q columns of \n  \n    \n      \n        \n          A\n        \n      \n    \n    {\\displaystyle \\mathbf {A} }\n   \n  \n    \n      \n        (\n        \n          \n            B\n            \u2032\n          \n        \n      \n    \n    {\\displaystyle (\\mathbf {B'} }\n   is the transposition of \n  \n    \n      \n        \n          B\n        \n        )\n      \n    \n    {\\displaystyle \\mathbf {B} )}\n  .Property 2: Consider again the orthonormal transformation\n\n  \n    \n      \n        y\n        =\n        \n          \n            B\n            \u2032\n          \n        \n        x\n      \n    \n    {\\displaystyle y=\\mathbf {B'} x}\n  \nwith \n  \n    \n      \n        x\n        ,\n        \n          B\n        \n        ,\n        \n          A\n        \n      \n    \n    {\\displaystyle x,\\mathbf {B} ,\\mathbf {A} }\n   and \n  \n    \n      \n        \n          \n            \u03a3\n          \n          \n            y\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {\\Sigma } _{y}}\n   defined as before. Then \n  \n    \n      \n        \n          tr\n        \n        (\n        \n          \n            \u03a3\n          \n          \n            y\n          \n        \n        )\n      \n    \n    {\\displaystyle {\\text{tr}}(\\mathbf {\\Sigma } _{y})}\n   is minimized by taking \n  \n    \n      \n        \n          B\n        \n        =\n        \n          \n            A\n          \n          \n            q\n          \n          \n            \u2217\n          \n        \n        ,\n      \n    \n    {\\displaystyle \\mathbf {B} =\\mathbf {A} _{q}^{*},}\n   where \n  \n    \n      \n        \n          \n            A\n          \n          \n            q\n          \n          \n            \u2217\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {A} _{q}^{*}}\n   consists of the last q columns of \n  \n    \n      \n        \n          A\n        \n      \n    \n    {\\displaystyle \\mathbf {A} }\n  .The statistical implication of this property is that the last few PCs are not simply unstructured left-overs after removing the important PCs. Because these last PCs have variances as small as possible they are useful in their own right. They can help to detect unsuspected near-constant linear relationships between the elements of x, and they may also be useful in regression, in selecting a subset of variables from x, and in outlier detection.\n\nProperty 3: (Spectral Decomposition of \u03a3)\n\n  \n    \n      \n        \n          \u03a3\n        \n        =\n        \n          \u03bb\n          \n            1\n          \n        \n        \n          \u03b1\n          \n            1\n          \n        \n        \n          \u03b1\n          \n            1\n          \n          \u2032\n        \n        +\n        \u22ef\n        +\n        \n          \u03bb\n          \n            p\n          \n        \n        \n          \u03b1\n          \n            p\n          \n        \n        \n          \u03b1\n          \n            p\n          \n          \u2032\n        \n      \n    \n    {\\displaystyle \\mathbf {\\Sigma } =\\lambda _{1}\\alpha _{1}\\alpha _{1}'+\\cdots +\\lambda _{p}\\alpha _{p}\\alpha _{p}'}\n  Before we look at its usage, we first look at diagonal elements,\n\n  \n    \n      \n        \n          Var\n        \n        (\n        \n          x\n          \n            j\n          \n        \n        )\n        =\n        \n          \u2211\n          \n            k\n            =\n            1\n          \n          \n            P\n          \n        \n        \n          \u03bb\n          \n            k\n          \n        \n        \n          \u03b1\n          \n            k\n            j\n          \n          \n            2\n          \n        \n      \n    \n    {\\displaystyle {\\text{Var}}(x_{j})=\\sum _{k=1}^{P}\\lambda _{k}\\alpha _{kj}^{2}}\n  Then, perhaps the main statistical implication of the result is that not only can we decompose the combined variances of all the elements of x into decreasing contributions due to each PC, but we can also decompose the whole covariance matrix into contributions \n  \n    \n      \n        \n          \u03bb\n          \n            k\n          \n        \n        \n          \u03b1\n          \n            k\n          \n        \n        \n          \u03b1\n          \n            k\n          \n          \u2032\n        \n      \n    \n    {\\displaystyle \\lambda _{k}\\alpha _{k}\\alpha _{k}'}\n   from each PC. Although not strictly decreasing, the elements of \n  \n    \n      \n        \n          \u03bb\n          \n            k\n          \n        \n        \n          \u03b1\n          \n            k\n          \n        \n        \n          \u03b1\n          \n            k\n          \n          \u2032\n        \n      \n    \n    {\\displaystyle \\lambda _{k}\\alpha _{k}\\alpha _{k}'}\n   will tend to become smaller as \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n   increases, as \n  \n    \n      \n        \n          \u03bb\n          \n            k\n          \n        \n        \n          \u03b1\n          \n            k\n          \n        \n        \n          \u03b1\n          \n            k\n          \n          \u2032\n        \n      \n    \n    {\\displaystyle \\lambda _{k}\\alpha _{k}\\alpha _{k}'}\n   is nonincreasing for increasing \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n  , whereas the elements of \n  \n    \n      \n        \n          \u03b1\n          \n            k\n          \n        \n      \n    \n    {\\displaystyle \\alpha _{k}}\n   tend to stay about the same size because of the normalization constraints: \n  \n    \n      \n        \n          \u03b1\n          \n            k\n          \n          \u2032\n        \n        \n          \u03b1\n          \n            k\n          \n        \n        =\n        1\n        ,\n        k\n        =\n        1\n        ,\n        \u2026\n        ,\n        p\n      \n    \n    {\\displaystyle \\alpha _{k}'\\alpha _{k}=1,k=1,\\dots ,p}\n  .\n\n\n=== Limitations ===\nAs noted above, the results of PCA depend on the scaling of the variables. This can be cured by scaling each feature by its standard deviation, so that one ends up with dimensionless features with unital variance.The applicability of PCA as described above is limited by certain (tacit) assumptions made in its derivation. In particular, PCA can capture linear correlations between the features but fails when this assumption is violated (see Figure 6a in the reference). In some cases, coordinate transformations can restore the linearity assumption and PCA can then be applied (see kernel PCA).\nAnother limitation is the mean-removal process before constructing the covariance matrix for PCA. In fields such as astronomy, all the signals are non-negative, and the mean-removal process will force the mean of some astrophysical exposures to be zero, which consequently creates unphysical negative fluxes, and forward modeling has to be performed to recover the true magnitude of the signals. As an alternative method, non-negative matrix factorization focusing only on the non-negative elements in the matrices, which is well-suited for astrophysical observations. See more at Relation between PCA and Non-negative Matrix Factorization.\n\n\n=== PCA and information theory ===\nDimensionality reduction loses information, in general. PCA-based dimensionality reduction tends to minimize that information loss, under certain signal and noise models.\nUnder the assumption that\n\n  \n    \n      \n        \n          x\n        \n        =\n        \n          s\n        \n        +\n        \n          n\n        \n        ,\n      \n    \n    {\\displaystyle \\mathbf {x} =\\mathbf {s} +\\mathbf {n} ,}\n  that is, that the data vector \n  \n    \n      \n        \n          x\n        \n      \n    \n    {\\displaystyle \\mathbf {x} }\n   is the sum of the desired information-bearing signal \n  \n    \n      \n        \n          s\n        \n      \n    \n    {\\displaystyle \\mathbf {s} }\n   and a noise signal \n  \n    \n      \n        \n          n\n        \n      \n    \n    {\\displaystyle \\mathbf {n} }\n   one can show that PCA can be optimal for dimensionality reduction, from an information-theoretic point-of-view.\nIn particular, Linsker showed that if \n  \n    \n      \n        \n          s\n        \n      \n    \n    {\\displaystyle \\mathbf {s} }\n   is Gaussian and \n  \n    \n      \n        \n          n\n        \n      \n    \n    {\\displaystyle \\mathbf {n} }\n   is Gaussian noise with a covariance matrix proportional to the identity matrix, the PCA maximizes the mutual information \n  \n    \n      \n        I\n        (\n        \n          y\n        \n        ;\n        \n          s\n        \n        )\n      \n    \n    {\\displaystyle I(\\mathbf {y} ;\\mathbf {s} )}\n   between the desired information \n  \n    \n      \n        \n          s\n        \n      \n    \n    {\\displaystyle \\mathbf {s} }\n   and the dimensionality-reduced output \n  \n    \n      \n        \n          y\n        \n        =\n        \n          \n            W\n          \n          \n            L\n          \n          \n            T\n          \n        \n        \n          x\n        \n      \n    \n    {\\displaystyle \\mathbf {y} =\\mathbf {W} _{L}^{T}\\mathbf {x} }\n  .If the noise is still Gaussian and has a covariance matrix proportional to the identity matrix (that is, the components of the vector \n  \n    \n      \n        \n          n\n        \n      \n    \n    {\\displaystyle \\mathbf {n} }\n   are iid), but the information-bearing signal \n  \n    \n      \n        \n          s\n        \n      \n    \n    {\\displaystyle \\mathbf {s} }\n   is non-Gaussian (which is a common scenario), PCA at least minimizes an upper bound on the information loss, which is defined as\n\n  \n    \n      \n        I\n        (\n        \n          x\n        \n        ;\n        \n          s\n        \n        )\n        \u2212\n        I\n        (\n        \n          y\n        \n        ;\n        \n          s\n        \n        )\n        .\n      \n    \n    {\\displaystyle I(\\mathbf {x} ;\\mathbf {s} )-I(\\mathbf {y} ;\\mathbf {s} ).}\n  The optimality of PCA is also preserved if the noise \n  \n    \n      \n        \n          n\n        \n      \n    \n    {\\displaystyle \\mathbf {n} }\n   is iid and at least more Gaussian (in terms of the Kullback\u2013Leibler divergence) than the information-bearing signal \n  \n    \n      \n        \n          s\n        \n      \n    \n    {\\displaystyle \\mathbf {s} }\n  . In general, even if the above signal model holds, PCA loses its information-theoretic optimality as soon as the noise \n  \n    \n      \n        \n          n\n        \n      \n    \n    {\\displaystyle \\mathbf {n} }\n   becomes dependent.\n\n\n== Computing PCA using the covariance method ==\nThe following is a detailed description of PCA using the covariance method (see also here) as opposed to the correlation method.The goal is to transform a given data set X of dimension p to an alternative data set Y of smaller dimension L. Equivalently, we are seeking to find the matrix Y, where Y is the Karhunen\u2013Lo\xe8ve transform (KLT) of matrix X:\n\n  \n    \n      \n        \n          Y\n        \n        =\n        \n          K\n          L\n          T\n        \n        {\n        \n          X\n        \n        }\n      \n    \n    {\\displaystyle \\mathbf {Y} =\\mathbb {KLT} \\{\\mathbf {X} \\}}\n  \n\n\n=== Organize the data set ===\nSuppose you have data comprising a set of observations of p variables, and you want to reduce the data so that each observation can be described with only L variables, L < p. Suppose further, that the data are arranged as a set of n data vectors \n  \n    \n      \n        \n          \n            x\n          \n          \n            1\n          \n        \n        \u2026\n        \n          \n            x\n          \n          \n            n\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{1}\\ldots \\mathbf {x} _{n}}\n   with each \n  \n    \n      \n        \n          \n            x\n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{i}}\n   representing a single grouped observation of the p variables.\n\nWrite \n  \n    \n      \n        \n          \n            x\n          \n          \n            1\n          \n        \n        \u2026\n        \n          \n            x\n          \n          \n            n\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{1}\\ldots \\mathbf {x} _{n}}\n   as row vectors, each of which has p columns.\nPlace the row vectors into a single matrix X of dimensions n \xd7 p.\n\n\n=== Calculate the empirical mean ===\nFind the empirical mean along each column j = 1, ..., p.\nPlace the calculated mean values into an empirical mean vector u of dimensions p \xd7 1.\n  \n    \n      \n        \n          u\n          \n            j\n          \n        \n        =\n        \n          \n            1\n            n\n          \n        \n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            n\n          \n        \n        \n          X\n          \n            i\n            j\n          \n        \n      \n    \n    {\\displaystyle u_{j}={1 \\over n}\\sum _{i=1}^{n}X_{ij}}\n  \n\n\n=== Calculate the deviations from the mean ===\nMean subtraction is an integral part of the solution towards finding a principal component basis that minimizes the mean square error of approximating the data. Hence we proceed by centering the data as follows:\n\nSubtract the empirical mean vector \n  \n    \n      \n        \n          \n            u\n          \n          \n            T\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {u} ^{T}}\n   from each row of the data matrix X.\nStore mean-subtracted data in the n \xd7 p matrix B.\n  \n    \n      \n        \n          B\n        \n        =\n        \n          X\n        \n        \u2212\n        \n          h\n        \n        \n          \n            u\n          \n          \n            T\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {B} =\\mathbf {X} -\\mathbf {h} \\mathbf {u} ^{T}}\n  \nwhere h is an n \xd7 1 column vector of all 1s:\n  \n    \n      \n        \n          h\n          \n            i\n          \n        \n        =\n        1\n        \n        \n        \n        \n          for \n        \n        i\n        =\n        1\n        ,\n        \u2026\n        ,\n        n\n      \n    \n    {\\displaystyle h_{i}=1\\,\\qquad \\qquad {\\text{for }}i=1,\\ldots ,n}\n  \n\n\n=== Find the covariance matrix ===\nFind the p \xd7 p empirical covariance matrix C from matrix B:\n  \n    \n      \n        \n          C\n        \n        =\n        \n          \n            1\n            \n              n\n              \u2212\n              1\n            \n          \n        \n        \n          \n            B\n          \n          \n            \u2217\n          \n        \n        \n          B\n        \n      \n    \n    {\\displaystyle \\mathbf {C} ={1 \\over {n-1}}\\mathbf {B} ^{*}\\mathbf {B} }\n  \nwhere \n  \n    \n      \n        \u2217\n      \n    \n    {\\displaystyle *}\n   is the conjugate transpose operator. If B consists entirely of real numbers, which is the case in many applications, the "conjugate transpose" is the same as the regular transpose.The reasoning behind using n \u2212 1 instead of n to calculate the covariance is Bessel's correction.\n\n\n=== Find the eigenvectors and eigenvalues of the covariance matrix ===\nCompute the matrix V of eigenvectors which diagonalizes the covariance matrix C:\n  \n    \n      \n        \n          \n            V\n          \n          \n            \u2212\n            1\n          \n        \n        \n          C\n        \n        \n          V\n        \n        =\n        \n          D\n        \n      \n    \n    {\\displaystyle \\mathbf {V} ^{-1}\\mathbf {C} \\mathbf {V} =\\mathbf {D} }\n  where D is the diagonal matrix of eigenvalues of C. This step will typically involve the use of a computer-based algorithm for computing eigenvectors and eigenvalues. These algorithms are readily available as sub-components of most matrix algebra systems, such as SAS, R, MATLAB, Mathematica, SciPy, IDL (Interactive Data Language), or GNU Octave as well as OpenCV.Matrix D will take the form of an p \xd7 p diagonal matrix, where\n  \n    \n      \n        \n          D\n          \n            k\n            l\n          \n        \n        =\n        \n          \u03bb\n          \n            k\n          \n        \n        \n        \n          for \n        \n        k\n        =\n        l\n      \n    \n    {\\displaystyle D_{kl}=\\lambda _{k}\\qquad {\\text{for }}k=l}\n  \nis the jth eigenvalue of the covariance matrix C, and\n\n  \n    \n      \n        \n          D\n          \n            k\n            l\n          \n        \n        =\n        0\n        \n        \n          for \n        \n        k\n        \u2260\n        l\n        .\n      \n    \n    {\\displaystyle D_{kl}=0\\qquad {\\text{for }}k\\neq l.}\n  Matrix V, also of dimension p \xd7 p, contains p column vectors, each of length p, which represent the p eigenvectors of the covariance matrix C.\nThe eigenvalues and eigenvectors are ordered and paired. The jth eigenvalue corresponds to the jth eigenvector.\nMatrix V denotes the matrix of right eigenvectors (as opposed to left eigenvectors). In general, the matrix of right eigenvectors need not be the (conjugate) transpose of the matrix of left eigenvectors.\n\n\n=== Rearrange the eigenvectors and eigenvalues ===\nSort the columns of the eigenvector matrix V and eigenvalue matrix D in order of decreasing eigenvalue.\nMake sure to maintain the correct pairings between the columns in each matrix.\n\n\n=== Compute the cumulative energy content for each eigenvector ===\nThe eigenvalues represent the distribution of the source data's energy among each of the eigenvectors, where the eigenvectors form a basis for the data. The cumulative energy content g for the jth eigenvector is the sum of the energy content across all of the eigenvalues from 1 through j:\n  \n    \n      \n        \n          g\n          \n            j\n          \n        \n        =\n        \n          \u2211\n          \n            k\n            =\n            1\n          \n          \n            j\n          \n        \n        \n          D\n          \n            k\n            k\n          \n        \n        \n        \n          f\n          o\n          r\n        \n        \n        j\n        =\n        1\n        ,\n        \u2026\n        ,\n        p\n      \n    \n    {\\displaystyle g_{j}=\\sum _{k=1}^{j}D_{kk}\\qquad \\mathrm {for} \\qquad j=1,\\dots ,p}\n  \n\n\n=== Select a subset of the eigenvectors as basis vectors ===\nSave the first L columns of V as the p \xd7 L matrix W:\n  \n    \n      \n        \n          W\n          \n            k\n            l\n          \n        \n        =\n        \n          V\n          \n            k\n            l\n          \n        \n        \n        \n          f\n          o\n          r\n        \n        \n        k\n        =\n        1\n        ,\n        \u2026\n        ,\n        p\n        \n        l\n        =\n        1\n        ,\n        \u2026\n        ,\n        L\n      \n    \n    {\\displaystyle W_{kl}=V_{kl}\\qquad \\mathrm {for} \\qquad k=1,\\dots ,p\\qquad l=1,\\dots ,L}\n  where\n  \n    \n      \n        1\n        \u2264\n        L\n        \u2264\n        p\n        .\n      \n    \n    {\\displaystyle 1\\leq L\\leq p.}\n  Use the vector g as a guide in choosing an appropriate value for L. The goal is to choose a value of L as small as possible while achieving a reasonably high value of g on a percentage basis. For example, you may want to choose L so that the cumulative energy g is above a certain threshold, like 90 percent. In this case, choose the smallest value of L such that\n  \n    \n      \n        \n          \n            \n              g\n              \n                L\n              \n            \n            \n              g\n              \n                p\n              \n            \n          \n        \n        \u2265\n        0.9\n        \n      \n    \n    {\\displaystyle {\\frac {g_{L}}{g_{p}}}\\geq 0.9\\,}\n  \n\n\n=== Project the z-scores of the data onto the new basis ===\nThe projected vectors are the columns of the matrix\n  \n    \n      \n        \n          T\n        \n        =\n        \n          Z\n        \n        \u22c5\n        \n          W\n        \n        =\n        \n          K\n          L\n          T\n        \n        {\n        \n          X\n        \n        }\n        .\n      \n    \n    {\\displaystyle \\mathbf {T} =\\mathbf {Z} \\cdot \\mathbf {W} =\\mathbb {KLT} \\{\\mathbf {X} \\}.}\n  The rows of matrix T represent the Kosambi-Karhunen\u2013Lo\xe8ve transforms (KLT) of the data vectors in the rows of matrix X.\n\n\n== Derivation of PCA using the covariance method ==\nLet X be a d-dimensional random vector expressed as column vector. Without loss of generality, assume X has zero mean.\nWe want to find \n  \n    \n      \n        (\n        \u2217\n        )\n        \n      \n    \n    {\\displaystyle (\\ast )\\,}\n   a d \xd7 d orthonormal transformation matrix P so that PX has a diagonal covariance matrix (that is, PX is a random vector with all its distinct components pairwise uncorrelated).\nA quick computation assuming \n  \n    \n      \n        P\n      \n    \n    {\\displaystyle P}\n   were unitary yields:\n\n  \n    \n      \n        \n          \n            \n              \n                cov\n                \u2061\n                (\n                P\n                X\n                )\n              \n              \n                \n                =\n                \n                  E\n                \n                [\n                P\n                X\n                 \n                (\n                P\n                X\n                \n                  )\n                  \n                    \u2217\n                  \n                \n                ]\n              \n            \n            \n              \n              \n                \n                =\n                \n                  E\n                \n                [\n                P\n                X\n                 \n                \n                  X\n                  \n                    \u2217\n                  \n                \n                \n                  P\n                  \n                    \u2217\n                  \n                \n                ]\n              \n            \n            \n              \n              \n                \n                =\n                P\n                 \n                \n                  E\n                \n                [\n                X\n                \n                  X\n                  \n                    \u2217\n                  \n                \n                ]\n                \n                  P\n                  \n                    \u2217\n                  \n                \n              \n            \n            \n              \n              \n                \n                =\n                P\n                 \n                cov\n                \u2061\n                (\n                X\n                )\n                \n                  P\n                  \n                    \u2212\n                    1\n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}\\operatorname {cov} (PX)&=\\mathbb {E} [PX~(PX)^{*}]\\\\&=\\mathbb {E} [PX~X^{*}P^{*}]\\\\&=P~\\mathbb {E} [XX^{*}]P^{*}\\\\&=P~\\operatorname {cov} (X)P^{-1}\\\\\\end{aligned}}}\n  Hence \n  \n    \n      \n        (\n        \u2217\n        )\n        \n      \n    \n    {\\displaystyle (\\ast )\\,}\n   holds if and only if \n  \n    \n      \n        cov\n        \u2061\n        (\n        X\n        )\n      \n    \n    {\\displaystyle \\operatorname {cov} (X)}\n   were diagonalisable by \n  \n    \n      \n        P\n      \n    \n    {\\displaystyle P}\n  .\nThis is very constructive, as cov(X) is guaranteed to be a non-negative definite matrix and thus is guaranteed to be diagonalisable by some unitary matrix.\n\n\n== Covariance-free computation ==\nIn practical implementations, especially with high dimensional data (large p), the naive covariance method is rarely used because it is not efficient due to high computational and memory costs of explicitly determining the covariance matrix. The covariance-free approach avoids the np2 operations of explicitly calculating and storing the covariance matrix XTX, instead utilizing one of matrix-free methods, for example, based on the function evaluating the product XT(X r) at the cost of 2np operations.\n\n\n=== Iterative computation ===\nOne way to compute the first principal component efficiently is shown in the following pseudo-code, for a data matrix X with zero mean, without ever computing its covariance matrix.\n\nr = a random vector of length p\n\n  \n    \n      \n        \n          r\n        \n        =\n        \n          \n            \n              r\n            \n            \n              \n                |\n              \n              \n                r\n              \n              \n                |\n              \n            \n          \n        \n      \n    \n    {\\displaystyle \\mathbf {r} ={\\frac {\\mathbf {r} }{|\\mathbf {r} |}}}\n  \ndo c times:\n      s = 0 (a vector of length p)\n      for each row \n  \n    \n      \n        \n          x\n        \n        \u2208\n        \n          X\n        \n      \n    \n    {\\displaystyle \\mathbf {x} \\in \\mathbf {X} }\n  \n            \n  \n    \n      \n        \n          s\n        \n        =\n        \n          s\n        \n        +\n        (\n        \n          x\n        \n        \u22c5\n        \n          r\n        \n        )\n        \n          x\n        \n      \n    \n    {\\displaystyle \\mathbf {s} =\\mathbf {s} +(\\mathbf {x} \\cdot \\mathbf {r} )\\mathbf {x} }\n  \n      \n  \n    \n      \n        e\n        i\n        g\n        e\n        n\n        v\n        a\n        l\n        u\n        e\n        =\n        \n          \n            r\n          \n          \n            T\n          \n        \n        \n          s\n        \n      \n    \n    {\\displaystyle eigenvalue=\\mathbf {r} ^{T}\\mathbf {s} }\n  \n      \n  \n    \n      \n        e\n        r\n        r\n        o\n        r\n        =\n        \n          |\n        \n        e\n        i\n        g\n        e\n        n\n        v\n        a\n        l\n        u\n        e\n        \u22c5\n        \n          r\n        \n        \u2212\n        \n          s\n        \n        \n          |\n        \n      \n    \n    {\\displaystyle error=|eigenvalue\\cdot \\mathbf {r} -\\mathbf {s} |}\n  \n      \n  \n    \n      \n        \n          r\n        \n        =\n        \n          \n            \n              s\n            \n            \n              \n                |\n              \n              \n                s\n              \n              \n                |\n              \n            \n          \n        \n      \n    \n    {\\displaystyle \\mathbf {r} ={\\frac {\\mathbf {s} }{|\\mathbf {s} |}}}\n  \n      exit if \n  \n    \n      \n        e\n        r\n        r\n        o\n        r\n        <\n        t\n        o\n        l\n        e\n        r\n        a\n        n\n        c\n        e\n      \n    \n    {\\displaystyle error<tolerance}\n  \nreturn \n  \n    \n      \n        e\n        i\n        g\n        e\n        n\n        v\n        a\n        l\n        u\n        e\n        ,\n        \n          r\n        \n      \n    \n    {\\displaystyle eigenvalue,\\mathbf {r} }\n  \n\nThis power iteration algorithm simply calculates the vector XT(X r), normalizes, and places the result back in r. The eigenvalue is approximated by rT (XTX) r, which is the Rayleigh quotient on the unit vector r for the covariance matrix XTX . If the largest singular value is well separated from the next largest one, the vector r gets close to the first principal component of X within the number of iterations c, which is small relative to p, at the total cost 2cnp. The power iteration convergence can be accelerated without noticeably sacrificing the small cost per iteration using more advanced matrix-free methods, such as the Lanczos algorithm or the Locally Optimal Block Preconditioned Conjugate Gradient (LOBPCG) method.\nSubsequent principal components can be computed one-by-one via deflation or simultaneously as a block. In the former approach, imprecisions in already computed approximate principal components additively affect the accuracy of the subsequently computed principal components, thus increasing the error with every new computation. The latter approach in the block power method replaces single-vectors r and s with block-vectors, matrices R and S. Every column of R approximates one of the leading principal components, while all columns are iterated simultaneously. The main calculation is evaluation of the product XT(X R). Implemented, for example, in LOBPCG, efficient blocking eliminates the accumulation of the errors, allows using high-level BLAS matrix-matrix product functions, and typically leads to faster convergence, compared to the single-vector one-by-one technique.\n\n\n=== The NIPALS method ===\nNon-linear iterative partial least squares (NIPALS) is a variant the classical power iteration with matrix deflation by subtraction implemented for computing the first few components in a principal component or partial least squares analysis. For very-high-dimensional datasets, such as those generated in the *omics sciences (for example, genomics, metabolomics) it is usually only necessary to compute the first few PCs. The non-linear iterative partial least squares (NIPALS) algorithm updates iterative approximations to the leading scores and loadings t1 and r1T by the power iteration multiplying on every iteration by X on the left and on the right, that is, calculation of the covariance matrix is avoided, just as in the matrix-free implementation of the power iterations to XTX, based on the function evaluating the product XT(X r) = ((X r)TX)T.\nThe matrix deflation by subtraction is performed by subtracting the outer product, t1r1T from X leaving the deflated residual matrix used to calculate the subsequent leading PCs.\nFor large data matrices, or matrices that have a high degree of column collinearity, NIPALS suffers from loss of orthogonality of PCs due to machine precision round-off errors accumulated in each iteration and matrix deflation by subtraction. A Gram\u2013Schmidt re-orthogonalization algorithm is applied to both the scores and the loadings at each iteration step to eliminate this loss of orthogonality. NIPALS reliance on single-vector multiplications cannot take advantage of high-level BLAS and results in slow convergence for clustered leading singular values\u2014both these deficiencies are resolved in more sophisticated matrix-free block solvers, such as the Locally Optimal Block Preconditioned Conjugate Gradient (LOBPCG) method.\n\n\n=== Online/sequential estimation ===\nIn an "online" or "streaming" situation with data arriving piece by piece rather than being stored in a single batch, it is useful to make an estimate of the PCA projection that can be updated sequentially. This can be done efficiently, but requires different algorithms.\n\n\n== PCA and qualitative variables ==\nIn PCA, it is common that we want to introduce qualitative variables as supplementary elements. For example, many quantitative variables have been measured on plants. For these plants, some qualitative variables are available as, for example, the species to which the plant belongs. These data were subjected to PCA for quantitative variables. When analyzing the results, it is natural to connect the principal components to the qualitative variable species.\nFor this, the following results are produced.\n\nIdentification, on the factorial planes, of the different species, for example, using different colors.\nRepresentation, on the factorial planes, of the centers of gravity of plants belonging to the same species.\nFor each center of gravity and each axis, p-value to judge the significance of the difference between the center of gravity and origin.These results are what is called introducing a qualitative variable as supplementary element. This procedure is detailed in and Husson, L\xea & Pag\xe8s 2009 and Pag\xe8s 2013.\nFew software offer this option in an "automatic" way. This is the case of SPAD that historically, following the work of Ludovic Lebart, was the first to propose this option, and the R package FactoMineR.\n\n\n== Applications ==\n\n\n=== Quantitative finance ===\n\nIn quantitative finance, principal component analysis can be directly applied to the risk management of interest rate derivative portfolios. Trading multiple swap instruments which are usually a function of 30-500 other market quotable swap instruments is sought to be reduced to usually 3 or 4 principal components, representing the path of interest rates on a macro basis. Converting risks to be represented as those to factor loadings (or multipliers) provides assessments and understanding beyond that available to simply collectively viewing risks to individual 30-500 buckets.\nPCA has also been applied to equity portfolios in a similar fashion, both to portfolio risk and to risk return. One application is to reduce portfolio risk, where allocation strategies are applied to the "principal portfolios" instead of the underlying stocks. A second is to enhance portfolio return, using the principal components to select stocks with upside potential.\n\n\n=== Neuroscience ===\nA variant of principal components analysis is used in neuroscience to identify the specific properties of a stimulus that increase a neuron's probability of generating an action potential. This technique is known as spike-triggered covariance analysis. In a typical application an experimenter presents a white noise process as a stimulus (usually either as a sensory input to a test subject, or as a current injected directly into the neuron) and records a train of action potentials, or spikes, produced by the neuron as a result. Presumably, certain features of the stimulus make the neuron more likely to spike. In order to extract these features, the experimenter calculates the covariance matrix of the spike-triggered ensemble, the set of all stimuli (defined and discretized over a finite time window, typically on the order of 100 ms) that immediately preceded a spike. The eigenvectors of the difference between the spike-triggered covariance matrix and the covariance matrix of the prior stimulus ensemble (the set of all stimuli, defined over the same length time window) then indicate the directions in the space of stimuli along which the variance of the spike-triggered ensemble differed the most from that of the prior stimulus ensemble. Specifically, the eigenvectors with the largest positive eigenvalues correspond to the directions along which the variance of the spike-triggered ensemble showed the largest positive change compared to the variance of the prior. Since these were the directions in which varying the stimulus led to a spike, they are often good approximations of the sought after relevant stimulus features.\nIn neuroscience, PCA is also used to discern the identity of a neuron from the shape of its action potential. Spike sorting is an important procedure because extracellular recording techniques often pick up signals from more than one neuron. In spike sorting, one first uses PCA to reduce the dimensionality of the space of action potential waveforms, and then performs clustering analysis to associate specific action potentials with individual neurons.\nPCA as a dimension reduction technique is particularly suited to detect coordinated activities of large neuronal ensembles. It has been used in determining collective variables, that is, order parameters, during phase transitions in the brain.\n\n\n== Relation with other methods ==\n\n\n=== Correspondence analysis ===\nCorrespondence analysis (CA)\nwas developed by Jean-Paul Benz\xe9cri\nand is conceptually similar to PCA, but scales the data (which should be non-negative) so that rows and columns are treated equivalently. It is traditionally applied to contingency tables.\nCA decomposes the chi-squared statistic associated to this table into orthogonal factors.\nBecause CA is a descriptive technique, it can be applied to tables for which the chi-squared statistic is appropriate or not.\nSeveral variants of CA are available including detrended correspondence analysis and canonical correspondence analysis. One special extension is multiple correspondence analysis, which may be seen as the counterpart of principal component analysis for categorical data.\n\n\n=== Factor analysis ===\nPrincipal component analysis creates variables that are linear combinations of the original variables. The new variables have the property that the variables are all orthogonal. The PCA transformation can be helpful as a pre-processing step before clustering. PCA is a variance-focused approach seeking to reproduce the total variable variance, in which components reflect both common and unique variance of the variable. PCA is generally preferred for purposes of data reduction (that is, translating variable space into optimal factor space) but not when the goal is to detect the latent construct or factors.\nFactor analysis is similar to principal component analysis, in that factor analysis also involves linear combinations of variables. Different from PCA, factor analysis is a correlation-focused approach seeking to reproduce the inter-correlations among variables, in which the factors "represent the common variance of variables, excluding unique variance". In terms of the correlation matrix, this corresponds with focusing on explaining the off-diagonal terms (that is, shared co-variance), while PCA focuses on explaining the terms that sit on the diagonal. However, as a side result, when trying to reproduce the on-diagonal terms, PCA also tends to fit relatively well the off-diagonal correlations. Results given by PCA and factor analysis are very similar in most situations, but this is not always the case, and there are some problems where the results are significantly different. Factor analysis is generally used when the research purpose is detecting data structure (that is, latent constructs or factors) or causal modeling. If the factor model is incorrectly formulated or the assumptions are not met, then factor analysis will give erroneous results.\n\n\n=== K-means clustering ===\nIt has been asserted that the relaxed solution of k-means clustering, specified by the cluster indicators, is given by the principal components, and the PCA subspace spanned by the principal directions is identical to the cluster centroid subspace. However, that PCA is a useful relaxation of k-means clustering was not a new result, and it is straightforward to uncover counterexamples to the statement that the cluster centroid subspace is spanned by the principal directions.\n\n\n=== Non-negative matrix factorization ===\n Non-negative matrix factorization (NMF) is a dimension reduction method where only non-negative elements in the matrices are used, which is therefore a promising method in astronomy, in the sense that astrophysical signals are non-negative. The PCA components are orthogonal to each other, while the NMF components are all non-negative and therefore constructs a non-orthogonal basis.\nIn PCA, the contribution of each component is ranked based on the magnitude of its corresponding eigenvalue, which is equivalent to the fractional residual variance (FRV) in analyzing empirical data. For NMF, its components are ranked based only on the empirical FRV curves. The residual fractional eigenvalue plots, that is, \n  \n    \n      \n        1\n        \u2212\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            k\n          \n        \n        \n          \u03bb\n          \n            i\n          \n        \n        \n          /\n        \n        \n          \u2211\n          \n            k\n            =\n            1\n          \n          \n            n\n          \n        \n        \n          \u03bb\n          \n            k\n          \n        \n      \n    \n    {\\displaystyle 1-\\sum _{i=1}^{k}\\lambda _{i}/\\sum _{k=1}^{n}\\lambda _{k}}\n   as a function of component number \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n   given a total of \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n   components, for PCA has a flat plateau, where no data is captured to remove the quasi-static noise, then the curves dropped quickly as an indication of over-fitting and captures random noise. The FRV curves for NMF is decreasing continuously  when the NMF components are constructed sequentially, indicating the continuous capturing of quasi-static noise; then converge to higher levels than PCA, indicating the less over-fitting property of NMF.\n\n\n== Generalizations ==\n\n\n=== Sparse PCA ===\n\nA particular disadvantage of PCA is that the principal components are usually linear combinations of all input variables. Sparse PCA overcomes this disadvantage by finding linear combinations that contain just a few input variables. It extends the classic method of principal component analysis (PCA) for the reduction of dimensionality of data by adding sparsity constraint on the input variables.\nSeveral approaches have been proposed, including\n\na regression framework,\na convex relaxation/semidefinite programming framework,\na generalized power method framework\nan alternating maximization framework\nforward-backward greedy search and exact methods using branch-and-bound techniques,\nBayesian formulation framework.The methodological and theoretical developments of Sparse PCA as well as its applications in scientific studies are recently reviewed in a survey paper.\n\n\n=== Nonlinear PCA ===\n\nMost of the modern methods for nonlinear dimensionality reduction find their theoretical and algorithmic roots in PCA or K-means. Pearson's original idea was to take a straight line (or plane) which will be "the best fit" to a set of data points. Principal curves and manifolds give the natural geometric framework for PCA generalization and extend the geometric interpretation of PCA by explicitly constructing an embedded manifold for data approximation, and by encoding using standard geometric projection onto the manifold, as it is illustrated by Fig.\nSee also the elastic map algorithm and principal geodesic analysis. Another popular generalization is kernel PCA, which corresponds to PCA performed in a reproducing kernel Hilbert space associated with a positive definite kernel.\nIn multilinear subspace learning, PCA is generalized to multilinear PCA (MPCA) that extracts features directly from tensor representations. MPCA is solved by performing PCA in each mode of the tensor iteratively. MPCA has been applied to face recognition, gait recognition, etc. MPCA is further extended to uncorrelated MPCA, non-negative MPCA and robust MPCA.\nN-way principal component analysis may be performed with models such as Tucker decomposition, PARAFAC, multiple factor analysis, co-inertia analysis, STATIS, and DISTATIS.\n\n\n=== Robust PCA ===\nWhile PCA finds the mathematically optimal method (as in minimizing the squared error), it is still sensitive to outliers in the data that produce large errors, something that the method tries to avoid in the first place. It is therefore common practice to remove outliers before computing PCA. However, in some contexts, outliers can be difficult to identify. For example, in data mining algorithms like correlation clustering, the assignment of points to clusters and outliers is not known beforehand.\nA recently proposed generalization of PCA based on a weighted PCA increases robustness by assigning different weights to data objects based on their estimated relevancy.\nOutlier-resistant variants of PCA have also been proposed, based on L1-norm formulations (L1-PCA).Robust principal component analysis (RPCA) via decomposition in low-rank and sparse matrices is a modification of PCA that works well with respect to grossly corrupted observations.\n\n\n== Similar techniques ==\n\n\n=== Independent component analysis ===\nIndependent component analysis (ICA) is directed to similar problems as principal component analysis, but finds additively separable components rather than successive approximations.\n\n\n=== Network component analysis ===\nGiven a matrix \n  \n    \n      \n        E\n      \n    \n    {\\displaystyle E}\n  , it tries to decompose it into two matrices such that \n  \n    \n      \n        E\n        =\n        A\n        P\n      \n    \n    {\\displaystyle E=AP}\n  . A key difference from techniques such as PCA and ICA is that some of the entries of \n  \n    \n      \n        A\n      \n    \n    {\\displaystyle A}\n   are constrained to be 0. Here \n  \n    \n      \n        P\n      \n    \n    {\\displaystyle P}\n   is termed the regulatory layer. While in general such a decomposition can have multiple solutions, they prove that if the following conditions are satisfied :\n\n  \n    \n      \n        A\n      \n    \n    {\\displaystyle A}\n   has full column rank\nEach column of \n  \n    \n      \n        A\n      \n    \n    {\\displaystyle A}\n   must have at least \n  \n    \n      \n        L\n        \u2212\n        1\n      \n    \n    {\\displaystyle L-1}\n   zeroes where \n  \n    \n      \n        L\n      \n    \n    {\\displaystyle L}\n   is the number of columns of \n  \n    \n      \n        A\n      \n    \n    {\\displaystyle A}\n   (or alternatively the number of rows of \n  \n    \n      \n        P\n      \n    \n    {\\displaystyle P}\n  ). The justification for this criterion is that if a node is removed from the regulatory layer along with all the output nodes connected to it, the result must still be characterized by a connectivity matrix with full column rank.\n\n  \n    \n      \n        P\n      \n    \n    {\\displaystyle P}\n   must have full row rank.then the decomposition is unique up to multiplication by a scalar.\n\n\n== Software/source code ==\nALGLIB - a C++ and C# library that implements PCA and truncated PCA\nAnalytica \u2013 The built-in EigenDecomp function computes principal components.\nELKI \u2013 includes PCA for projection, including robust variants of PCA, as well as PCA-based clustering algorithms.\nGretl \u2013 principal component analysis can be performed either via the pca command or via the princomp() function.\nJulia \u2013 Supports PCA with the pca function in the MultivariateStats package\nKNIME \u2013 A java based nodal arranging software for Analysis, in this the nodes called PCA, PCA compute, PCA Apply, PCA inverse make it easily.\nMathematica \u2013 Implements principal component analysis with the PrincipalComponents command using both covariance and correlation methods.\nMathPHP - PHP mathematics library with support for PCA.\nMATLAB Statistics Toolbox \u2013 The functions princomp and pca (R2012b) give the principal components, while the function pcares gives the residuals and reconstructed matrix for a low-rank PCA approximation.\nMatplotlib \u2013 Python library have a PCA package in the .mlab module.\nmlpack \u2013 Provides an implementation of principal component analysis in C++.\nNAG Library \u2013 Principal components analysis is implemented via the g03aa routine (available in both the Fortran versions of the Library).\nNMath \u2013 Proprietary numerical library containing PCA for the .NET Framework.\nGNU Octave \u2013 Free software computational environment mostly compatible with MATLAB, the function princomp gives the principal component.\nOpenCV\nOracle Database 12c \u2013 Implemented via DBMS_DATA_MINING.SVDS_SCORING_MODE by specifying setting value SVDS_SCORING_PCA\nOrange (software) \u2013 Integrates PCA in its visual programming environment. PCA displays a scree plot (degree of explained variance) where user can interactively select the number of principal components.\nOrigin \u2013 Contains PCA in its Pro version.\nQlucore \u2013 Commercial software for analyzing multivariate data with instant response using PCA.\nR \u2013 Free statistical package, the functions princomp and prcomp can be used for principal component analysis; prcomp uses singular value decomposition which generally gives better numerical accuracy. Some packages that implement PCA in R, include, but are not limited to: ade4, vegan, ExPosition, dimRed, and FactoMineR.\nSAS - Proprietary software; for example, see \nScikit-learn \u2013 Python library for machine learning which contains PCA, Probabilistic PCA, Kernel PCA, Sparse PCA and other techniques in the decomposition module.\nWeka \u2013 Java library for machine learning which contains modules for computing principal components.\n\n\n== See also ==\n\n\n== References ==\n\nS. Ouyang and Y. Hua, "Bi-iterative least square method for subspace tracking," IEEE Transactions on Signal Processing, pp. 2948-2996, Vol. 53, No. 8, August 2005.\nY. Hua and T. Chen, "On convergence of the NIC algorithm for subspace computation," IEEE Transactions on Signal Processing, pp. 1112-1115, Vol. 52, No. 4, April 2004.\nY. Hua, \u201cAsymptotical orthonormalization of subspace matrices without square root,\u201d IEEE Signal Processing Magazine, Vol. 21, No. 4, pp. 56-61, July 2004.\nY. Hua, M. Nikpour and P. Stoica, "Optimal reduced rank estimation and filtering," IEEE Transactions on Signal Processing, pp. 457-469, Vol. 49, No. 3, March 2001.\nY. Hua, Y. Xiang, T. Chen, K. Abed-Meraim and Y. Miao, "A new look at the power method for fast subspace tracking," Digital Signal Processing, Vol. 9. pp. 297-314, 1999.\nY. Hua and W. Liu, "Generalized Karhunen-Loeve Transform", IEEE Signal Processing Letters, Vol. 5, No. 6, pp. 141-142, June 1998.\nY. Miao and Y. Hua, "Fast subspace tracking and neural network learning by a novel information criterion," IEEE Transactions on Signal Processing, Vol. 46, No. 7, pp. 1967-1979, July 1998.\nT. Chen, Y. Hua and W. Y. Yan, "Global convergence of Oja's subspace algorithm for principal component extraction," IEEE Transactions on Neural Networks, Vol. 9, No. 1, pp. 58-67, Jan 1998.\n\n\n== Further reading ==\nJackson, J.E. (1991). A User's Guide to Principal Components (Wiley).\nJolliffe, I. T. (1986). Principal Component Analysis. Springer Series in Statistics. Springer-Verlag. pp. 487. CiteSeerX 10.1.1.149.8828. doi:10.1007/b98835. ISBN 978-0-387-95442-4.\nJolliffe, I.T. (2002). Principal Component Analysis, second edition (Springer).\nHusson Fran\xe7ois, L\xea S\xe9bastien & Pag\xe8s J\xe9r\xf4me (2009). Exploratory Multivariate Analysis by Example Using R. Chapman & Hall/CRC The R Series, London. 224p. ISBN 978-2-7535-0938-2\nPag\xe8s J\xe9r\xf4me (2014). Multiple Factor Analysis by Example Using R. Chapman & Hall/CRC The R Series London 272 p\n\n\n== External links ==\nUniversity of Copenhagen video by Rasmus Bro on YouTube\nStanford University video by Andrew Ng on YouTube\nA Tutorial on Principal Component Analysis\nA layman's introduction to principal component analysis on YouTube (a video of less than 100 seconds.)\nStatQuest: Principal Component Analysis (PCA) clearly explained on YouTube\nSee also the list of Software implementations